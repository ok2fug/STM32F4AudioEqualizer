
dac-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004204  08004204  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800420c  0800420c  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08004214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027dc  20000150  08004364  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000292c  08004364  0002292c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2a1  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000224a  00000000  00000000  0002e421  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  00030670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  000312c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023896  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa45  00000000  00000000  0005569e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dba02  00000000  00000000  000600e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bae5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  0013bb60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000150 	.word	0x20000150
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003e0c 	.word	0x08003e0c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000154 	.word	0x20000154
 80001e8:	08003e0c 	.word	0x08003e0c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 fc6d 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f002 fdc0 	bl	80030a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fc85 	bl	8000e5e <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 fc4d 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000014c 	.word	0x2000014c
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	200008b0 	.word	0x200008b0

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200008b0 	.word	0x200008b0

080005d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	e033      	b.n	800064e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d109      	bne.n	8000602 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f831 	bl	8000656 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	2b00      	cmp	r3, #0
 800060c:	d118      	bne.n	8000640 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000616:	f023 0302 	bic.w	r3, r3, #2
 800061a:	f043 0202 	orr.w	r2, r3, #2
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 fa1a 	bl	8000a5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f023 0303 	bic.w	r3, r3, #3
 8000636:	f043 0201 	orr.w	r2, r3, #1
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	641a      	str	r2, [r3, #64]	; 0x40
 800063e:	e001      	b.n	8000644 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800067e:	2b01      	cmp	r3, #1
 8000680:	d101      	bne.n	8000686 <HAL_ADC_Start+0x1a>
 8000682:	2302      	movs	r3, #2
 8000684:	e0a5      	b.n	80007d2 <HAL_ADC_Start+0x166>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b01      	cmp	r3, #1
 800069a:	d018      	beq.n	80006ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006ac:	4b4c      	ldr	r3, [pc, #304]	; (80007e0 <HAL_ADC_Start+0x174>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a4c      	ldr	r2, [pc, #304]	; (80007e4 <HAL_ADC_Start+0x178>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	0c9a      	lsrs	r2, r3, #18
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006c0:	e002      	b.n	80006c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f9      	bne.n	80006c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d179      	bne.n	80007d0 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d007      	beq.n	800070e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000706:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800071a:	d106      	bne.n	800072a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000720:	f023 0206 	bic.w	r2, r3, #6
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	645a      	str	r2, [r3, #68]	; 0x44
 8000728:	e002      	b.n	8000730 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <HAL_ADC_Start+0x17c>)
 800073a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000744:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	2b00      	cmp	r3, #0
 8000750:	d12a      	bne.n	80007a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <HAL_ADC_Start+0x180>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d015      	beq.n	8000788 <HAL_ADC_Start+0x11c>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <HAL_ADC_Start+0x184>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d105      	bne.n	8000772 <HAL_ADC_Start+0x106>
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <HAL_ADC_Start+0x17c>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f003 031f 	and.w	r3, r3, #31
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00a      	beq.n	8000788 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <HAL_ADC_Start+0x188>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d129      	bne.n	80007d0 <HAL_ADC_Start+0x164>
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <HAL_ADC_Start+0x17c>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	2b0f      	cmp	r3, #15
 8000786:	d823      	bhi.n	80007d0 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000792:	2b00      	cmp	r3, #0
 8000794:	d11c      	bne.n	80007d0 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689a      	ldr	r2, [r3, #8]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	e013      	b.n	80007d0 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_ADC_Start+0x180>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10e      	bne.n	80007d0 <HAL_ADC_Start+0x164>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d107      	bne.n	80007d0 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007ce:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000014c 	.word	0x2000014c
 80007e4:	431bde83 	.word	0x431bde83
 80007e8:	40012300 	.word	0x40012300
 80007ec:	40012000 	.word	0x40012000
 80007f0:	40012100 	.word	0x40012100
 80007f4:	40012200 	.word	0x40012200

080007f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800080c:	2b01      	cmp	r3, #1
 800080e:	d101      	bne.n	8000814 <HAL_ADC_ConfigChannel+0x1c>
 8000810:	2302      	movs	r3, #2
 8000812:	e113      	b.n	8000a3c <HAL_ADC_ConfigChannel+0x244>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2201      	movs	r2, #1
 8000818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b09      	cmp	r3, #9
 8000822:	d925      	bls.n	8000870 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68d9      	ldr	r1, [r3, #12]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	3b1e      	subs	r3, #30
 800083a:	2207      	movs	r2, #7
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43da      	mvns	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	400a      	ands	r2, r1
 8000848:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68d9      	ldr	r1, [r3, #12]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	4603      	mov	r3, r0
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4403      	add	r3, r0
 8000862:	3b1e      	subs	r3, #30
 8000864:	409a      	lsls	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	430a      	orrs	r2, r1
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	e022      	b.n	80008b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6919      	ldr	r1, [r3, #16]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b29b      	uxth	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	2207      	movs	r2, #7
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	400a      	ands	r2, r1
 8000892:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6919      	ldr	r1, [r3, #16]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	4618      	mov	r0, r3
 80008a6:	4603      	mov	r3, r0
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4403      	add	r3, r0
 80008ac:	409a      	lsls	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	d824      	bhi.n	8000908 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	3b05      	subs	r3, #5
 80008d0:	221f      	movs	r2, #31
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	400a      	ands	r2, r1
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	3b05      	subs	r3, #5
 80008fa:	fa00 f203 	lsl.w	r2, r0, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	430a      	orrs	r2, r1
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
 8000906:	e04c      	b.n	80009a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b0c      	cmp	r3, #12
 800090e:	d824      	bhi.n	800095a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	3b23      	subs	r3, #35	; 0x23
 8000922:	221f      	movs	r2, #31
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43da      	mvns	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	400a      	ands	r2, r1
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	b29b      	uxth	r3, r3
 800093e:	4618      	mov	r0, r3
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	3b23      	subs	r3, #35	; 0x23
 800094c:	fa00 f203 	lsl.w	r2, r0, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	430a      	orrs	r2, r1
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
 8000958:	e023      	b.n	80009a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	3b41      	subs	r3, #65	; 0x41
 800096c:	221f      	movs	r2, #31
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	400a      	ands	r2, r1
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	3b41      	subs	r3, #65	; 0x41
 8000996:	fa00 f203 	lsl.w	r2, r0, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	430a      	orrs	r2, r1
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <HAL_ADC_ConfigChannel+0x250>)
 80009a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <HAL_ADC_ConfigChannel+0x254>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d10f      	bne.n	80009d0 <HAL_ADC_ConfigChannel+0x1d8>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b12      	cmp	r3, #18
 80009b6:	d10b      	bne.n	80009d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_ADC_ConfigChannel+0x254>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12b      	bne.n	8000a32 <HAL_ADC_ConfigChannel+0x23a>
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <HAL_ADC_ConfigChannel+0x258>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d003      	beq.n	80009ec <HAL_ADC_ConfigChannel+0x1f4>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	d122      	bne.n	8000a32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_ADC_ConfigChannel+0x258>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d111      	bne.n	8000a32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_ADC_ConfigChannel+0x25c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_ADC_ConfigChannel+0x260>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	0c9a      	lsrs	r2, r3, #18
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000a24:	e002      	b.n	8000a2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f9      	bne.n	8000a26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40012300 	.word	0x40012300
 8000a4c:	40012000 	.word	0x40012000
 8000a50:	10000012 	.word	0x10000012
 8000a54:	2000014c 	.word	0x2000014c
 8000a58:	431bde83 	.word	0x431bde83

08000a5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a64:	4b79      	ldr	r3, [pc, #484]	; (8000c4c <ADC_Init+0x1f0>)
 8000a66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6859      	ldr	r1, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	021a      	lsls	r2, r3, #8
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6859      	ldr	r1, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6899      	ldr	r1, [r3, #8]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aee:	4a58      	ldr	r2, [pc, #352]	; (8000c50 <ADC_Init+0x1f4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d022      	beq.n	8000b3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6899      	ldr	r1, [r3, #8]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6899      	ldr	r1, [r3, #8]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	e00f      	b.n	8000b5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f022 0202 	bic.w	r2, r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6899      	ldr	r1, [r3, #8]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e1b      	ldrb	r3, [r3, #24]
 8000b74:	005a      	lsls	r2, r3, #1
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d01b      	beq.n	8000bc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6859      	ldr	r1, [r3, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	035a      	lsls	r2, r3, #13
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	e007      	b.n	8000bd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	051a      	lsls	r2, r3, #20
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6899      	ldr	r1, [r3, #8]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c12:	025a      	lsls	r2, r3, #9
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6899      	ldr	r1, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	029a      	lsls	r2, r3, #10
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	609a      	str	r2, [r3, #8]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40012300 	.word	0x40012300
 8000c50:	0f000001 	.word	0x0f000001

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff3e 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff8e 	bl	8000d48 <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff31 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e014      	b.n	8000eb2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d105      	bne.n	8000e9e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f002 f92b 	bl	80030f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	795b      	ldrb	r3, [r3, #5]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <HAL_DAC_Start+0x1e>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e050      	b.n	8000f7a <HAL_DAC_Start+0xc0>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6819      	ldr	r1, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d11a      	bne.n	8000f34 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f14:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d127      	bne.n	8000f6c <HAL_DAC_Start+0xb2>
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b38      	cmp	r3, #56	; 0x38
 8000f20:	d124      	bne.n	8000f6c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0201 	orr.w	r2, r2, #1
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	e01b      	b.n	8000f6c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f3e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8000f4a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f52:	d10b      	bne.n	8000f6c <HAL_DAC_Start+0xb2>
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8000f5a:	d107      	bne.n	8000f6c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0202 	orr.w	r2, r2, #2
 8000f6a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f9c:	d118      	bne.n	8000fd0 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f043 0201 	orr.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fc8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f825 	bl	800101a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fde:	d118      	bne.n	8001012 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	f043 0202 	orr.w	r2, r3, #2
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800100a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f880 	bl	8001112 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800102e:	b480      	push	{r7}
 8001030:	b087      	sub	sp, #28
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	795b      	ldrb	r3, [r3, #5]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_DAC_ConfigChannel+0x20>
 800104a:	2302      	movs	r3, #2
 800104c:	e036      	b.n	80010bc <HAL_DAC_ConfigChannel+0x8e>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2202      	movs	r2, #2
 8001058:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001062:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	4313      	orrs	r3, r2
 800108c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	22c0      	movs	r2, #192	; 0xc0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43da      	mvns	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	400a      	ands	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2201      	movs	r2, #1
 80010b2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	3308      	adds	r3, #8
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e004      	b.n	80010fc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	3314      	adds	r3, #20
 80010fa:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	461a      	mov	r2, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e177      	b.n	8001434 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 8166 	bne.w	800142e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x4a>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b12      	cmp	r3, #18
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	69b9      	ldr	r1, [r7, #24]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d00b      	beq.n	800120e <HAL_GPIO_Init+0xe6>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001202:	2b11      	cmp	r3, #17
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b12      	cmp	r3, #18
 800120c:	d130      	bne.n	8001270 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80c0 	beq.w	800142e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b65      	ldr	r3, [pc, #404]	; (8001448 <HAL_GPIO_Init+0x320>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a64      	ldr	r2, [pc, #400]	; (8001448 <HAL_GPIO_Init+0x320>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <HAL_GPIO_Init+0x320>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ca:	4a60      	ldr	r2, [pc, #384]	; (800144c <HAL_GPIO_Init+0x324>)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a57      	ldr	r2, [pc, #348]	; (8001450 <HAL_GPIO_Init+0x328>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d037      	beq.n	8001366 <HAL_GPIO_Init+0x23e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a56      	ldr	r2, [pc, #344]	; (8001454 <HAL_GPIO_Init+0x32c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d031      	beq.n	8001362 <HAL_GPIO_Init+0x23a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_GPIO_Init+0x330>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x236>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a54      	ldr	r2, [pc, #336]	; (800145c <HAL_GPIO_Init+0x334>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x232>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a53      	ldr	r2, [pc, #332]	; (8001460 <HAL_GPIO_Init+0x338>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x22e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a52      	ldr	r2, [pc, #328]	; (8001464 <HAL_GPIO_Init+0x33c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x22a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_GPIO_Init+0x340>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_GPIO_Init+0x344>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	; (8001470 <HAL_GPIO_Init+0x348>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	; (8001474 <HAL_GPIO_Init+0x34c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x21a>
 800133e:	2309      	movs	r3, #9
 8001340:	e012      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001342:	230a      	movs	r3, #10
 8001344:	e010      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001346:	2308      	movs	r3, #8
 8001348:	e00e      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800134a:	2307      	movs	r3, #7
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800134e:	2306      	movs	r3, #6
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x240>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x240>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	4934      	ldr	r1, [pc, #208]	; (800144c <HAL_GPIO_Init+0x324>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001386:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <HAL_GPIO_Init+0x350>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013aa:	4a33      	ldr	r2, [pc, #204]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d4:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_GPIO_Init+0x350>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <HAL_GPIO_Init+0x350>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_GPIO_Init+0x350>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a13      	ldr	r2, [pc, #76]	; (8001478 <HAL_GPIO_Init+0x350>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f ae84 	bls.w	8001144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	3724      	adds	r7, #36	; 0x24
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40022000 	.word	0x40022000
 8001474:	40022400 	.word	0x40022400
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	401a      	ands	r2, r3
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d104      	bne.n	80014d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	041a      	lsls	r2, r3, #16
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_PWREx_EnableOverDrive+0x90>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_PWREx_EnableOverDrive+0x90>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_PWREx_EnableOverDrive+0x90>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_PWREx_EnableOverDrive+0x94>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff f852 	bl	80005b8 <HAL_GetTick>
 8001514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001516:	e009      	b.n	800152c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001518:	f7ff f84e 	bl	80005b8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001526:	d901      	bls.n	800152c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e01f      	b.n	800156c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_PWREx_EnableOverDrive+0x98>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d1ee      	bne.n	8001518 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001540:	f7ff f83a 	bl	80005b8 <HAL_GetTick>
 8001544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001546:	e009      	b.n	800155c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001548:	f7ff f836 	bl	80005b8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001556:	d901      	bls.n	800155c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e007      	b.n	800156c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_PWREx_EnableOverDrive+0x98>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001568:	d1ee      	bne.n	8001548 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	420e0040 	.word	0x420e0040
 800157c:	40007000 	.word	0x40007000
 8001580:	420e0044 	.word	0x420e0044

08001584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e22d      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d075      	beq.n	800168e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	4ba3      	ldr	r3, [pc, #652]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d00c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4ba0      	ldr	r3, [pc, #640]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d112      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	4b9d      	ldr	r3, [pc, #628]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c6:	d10b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	4b99      	ldr	r3, [pc, #612]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d05b      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d157      	bne.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e208      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x74>
 80015ea:	4b91      	ldr	r3, [pc, #580]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a90      	ldr	r2, [pc, #576]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a8a      	ldr	r2, [pc, #552]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b88      	ldr	r3, [pc, #544]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a87      	ldr	r2, [pc, #540]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 800161c:	4b84      	ldr	r3, [pc, #528]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a83      	ldr	r2, [pc, #524]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b81      	ldr	r3, [pc, #516]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a80      	ldr	r2, [pc, #512]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7fe ffbc 	bl	80005b8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7fe ffb8 	bl	80005b8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1cd      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b76      	ldr	r3, [pc, #472]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xc0>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7fe ffa8 	bl	80005b8 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7fe ffa4 	bl	80005b8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1b9      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b62      	ldr	r3, [pc, #392]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b5c      	ldr	r3, [pc, #368]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e18d      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b56      	ldr	r3, [pc, #344]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4952      	ldr	r1, [pc, #328]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b4f      	ldr	r3, [pc, #316]	; (8001834 <HAL_RCC_OscConfig+0x2b0>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7fe ff5d 	bl	80005b8 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7fe ff59 	bl	80005b8 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e16e      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b43      	ldr	r3, [pc, #268]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4940      	ldr	r1, [pc, #256]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_OscConfig+0x2b0>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7fe ff3c 	bl	80005b8 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7fe ff38 	bl	80005b8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e14d      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d030      	beq.n	80017d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d016      	beq.n	80017a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_RCC_OscConfig+0x2b4>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7fe ff1c 	bl	80005b8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7fe ff18 	bl	80005b8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e12d      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x200>
 80017a2:	e015      	b.n	80017d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x2b4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7fe ff05 	bl	80005b8 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b2:	f7fe ff01 	bl	80005b8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e116      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a0 	beq.w	800191e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_OscConfig+0x2b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d121      	bne.n	800185e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_RCC_OscConfig+0x2b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_RCC_OscConfig+0x2b8>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7fe fec7 	bl	80005b8 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e011      	b.n	8001852 <HAL_RCC_OscConfig+0x2ce>
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	42470000 	.word	0x42470000
 8001838:	42470e80 	.word	0x42470e80
 800183c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001840:	f7fe feba 	bl	80005b8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0cf      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x2f0>
 8001866:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	4a65      	ldr	r2, [pc, #404]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
 8001872:	e01c      	b.n	80018ae <HAL_RCC_OscConfig+0x32a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x312>
 800187c:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a5f      	ldr	r2, [pc, #380]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a5c      	ldr	r2, [pc, #368]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x32a>
 8001896:	4b5a      	ldr	r3, [pc, #360]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a59      	ldr	r2, [pc, #356]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	4b57      	ldr	r3, [pc, #348]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a56      	ldr	r2, [pc, #344]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d015      	beq.n	80018e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7fe fe7f 	bl	80005b8 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7fe fe7b 	bl	80005b8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e08e      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCC_OscConfig+0x33a>
 80018e0:	e014      	b.n	800190c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7fe fe69 	bl	80005b8 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7fe fe65 	bl	80005b8 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e078      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d064      	beq.n	80019f0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b08      	cmp	r3, #8
 8001930:	d05c      	beq.n	80019ec <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d141      	bne.n	80019be <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_RCC_OscConfig+0x480>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7fe fe3a 	bl	80005b8 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7fe fe36 	bl	80005b8 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04b      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	085b      	lsrs	r3, r3, #1
 800197e:	3b01      	subs	r3, #1
 8001980:	041b      	lsls	r3, r3, #16
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	491d      	ldr	r1, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_RCC_OscConfig+0x480>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7fe fe0f 	bl	80005b8 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7fe fe0b 	bl	80005b8 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e020      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x41a>
 80019bc:	e018      	b.n	80019f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_OscConfig+0x480>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7fe fdf8 	bl	80005b8 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7fe fdf4 	bl	80005b8 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e009      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_RCC_OscConfig+0x47c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x448>
 80019ea:	e001      	b.n	80019f0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40007000 	.word	0x40007000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	42470060 	.word	0x42470060

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0ca      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d90c      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b6      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a57      	ldr	r2, [pc, #348]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a51      	ldr	r2, [pc, #324]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494c      	ldr	r1, [pc, #304]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d044      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07d      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06d      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e065      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4933      	ldr	r1, [pc, #204]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7fe fd5e 	bl	80005b8 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7fe fd5a 	bl	80005b8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e04d      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20c      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_RCC_ClockConfig+0x1b4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e030      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4915      	ldr	r1, [pc, #84]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f81d 	bl	8001bcc <HAL_RCC_GetSysClockFreq>
 8001b92:	4601      	mov	r1, r0
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7fe fcc0 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08003e24 	.word	0x08003e24
 8001bc8:	2000014c 	.word	0x2000014c

08001bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d007      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x32>
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d008      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x38>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80b4 	bne.w	8001d60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bfa:	60bb      	str	r3, [r7, #8]
       break;
 8001bfc:	e0b3      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c00:	60bb      	str	r3, [r7, #8]
      break;
 8001c02:	e0b0      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0e:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d04a      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	4b55      	ldr	r3, [pc, #340]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	f04f 0400 	mov.w	r4, #0
 8001c24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	ea03 0501 	and.w	r5, r3, r1
 8001c30:	ea04 0602 	and.w	r6, r4, r2
 8001c34:	4629      	mov	r1, r5
 8001c36:	4632      	mov	r2, r6
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f04f 0400 	mov.w	r4, #0
 8001c40:	0154      	lsls	r4, r2, #5
 8001c42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c46:	014b      	lsls	r3, r1, #5
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	1b49      	subs	r1, r1, r5
 8001c4e:	eb62 0206 	sbc.w	r2, r2, r6
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f04f 0400 	mov.w	r4, #0
 8001c5a:	0194      	lsls	r4, r2, #6
 8001c5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c60:	018b      	lsls	r3, r1, #6
 8001c62:	1a5b      	subs	r3, r3, r1
 8001c64:	eb64 0402 	sbc.w	r4, r4, r2
 8001c68:	f04f 0100 	mov.w	r1, #0
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	00e2      	lsls	r2, r4, #3
 8001c72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c76:	00d9      	lsls	r1, r3, #3
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	195b      	adds	r3, r3, r5
 8001c7e:	eb44 0406 	adc.w	r4, r4, r6
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	0262      	lsls	r2, r4, #9
 8001c8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c90:	0259      	lsls	r1, r3, #9
 8001c92:	460b      	mov	r3, r1
 8001c94:	4614      	mov	r4, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	4621      	mov	r1, r4
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f04f 0400 	mov.w	r4, #0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	f7fe faa2 	bl	80001ec <__aeabi_uldivmod>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e049      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb0:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	f04f 0400 	mov.w	r4, #0
 8001cba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	ea03 0501 	and.w	r5, r3, r1
 8001cc6:	ea04 0602 	and.w	r6, r4, r2
 8001cca:	4629      	mov	r1, r5
 8001ccc:	4632      	mov	r2, r6
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f04f 0400 	mov.w	r4, #0
 8001cd6:	0154      	lsls	r4, r2, #5
 8001cd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cdc:	014b      	lsls	r3, r1, #5
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	1b49      	subs	r1, r1, r5
 8001ce4:	eb62 0206 	sbc.w	r2, r2, r6
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	f04f 0400 	mov.w	r4, #0
 8001cf0:	0194      	lsls	r4, r2, #6
 8001cf2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cf6:	018b      	lsls	r3, r1, #6
 8001cf8:	1a5b      	subs	r3, r3, r1
 8001cfa:	eb64 0402 	sbc.w	r4, r4, r2
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	00e2      	lsls	r2, r4, #3
 8001d08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d0c:	00d9      	lsls	r1, r3, #3
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4614      	mov	r4, r2
 8001d12:	195b      	adds	r3, r3, r5
 8001d14:	eb44 0406 	adc.w	r4, r4, r6
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	02a2      	lsls	r2, r4, #10
 8001d22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d26:	0299      	lsls	r1, r3, #10
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	4621      	mov	r1, r4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f04f 0400 	mov.w	r4, #0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4623      	mov	r3, r4
 8001d3a:	f7fe fa57 	bl	80001ec <__aeabi_uldivmod>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460c      	mov	r4, r1
 8001d42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	60bb      	str	r3, [r7, #8]
      break;
 8001d5e:	e002      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d62:	60bb      	str	r3, [r7, #8]
      break;
 8001d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d66:	68bb      	ldr	r3, [r7, #8]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e01d      	b.n	8001dca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f001 f9ea 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f000 f968 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d122      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d11b      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f06f 0202 	mvn.w	r2, #2
 8001e46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8f8 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001e62:	e005      	b.n	8001e70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8ea 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8fb 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d122      	bne.n	8001eca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d11b      	bne.n	8001eca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0204 	mvn.w	r2, #4
 8001e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8ce 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001eb6:	e005      	b.n	8001ec4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8c0 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8d1 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d122      	bne.n	8001f1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d11b      	bne.n	8001f1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f06f 0208 	mvn.w	r2, #8
 8001eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8a4 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001f0a:	e005      	b.n	8001f18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f896 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8a7 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d122      	bne.n	8001f72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d11b      	bne.n	8001f72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f06f 0210 	mvn.w	r2, #16
 8001f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2208      	movs	r2, #8
 8001f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f87a 	bl	8002052 <HAL_TIM_IC_CaptureCallback>
 8001f5e:	e005      	b.n	8001f6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f86c 	bl	800203e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f87d 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d10e      	bne.n	8001f9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f06f 0201 	mvn.w	r2, #1
 8001f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f846 	bl	800202a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d10e      	bne.n	8001fca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d107      	bne.n	8001fca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f952 	bl	800226e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b40      	cmp	r3, #64	; 0x40
 8001fd6:	d10e      	bne.n	8001ff6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d107      	bne.n	8001ff6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f842 	bl	800207a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b20      	cmp	r3, #32
 8002002:	d10e      	bne.n	8002022 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b20      	cmp	r3, #32
 8002010:	d107      	bne.n	8002022 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f06f 0220 	mvn.w	r2, #32
 800201a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f91c 	bl	800225a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d00f      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <TIM_Base_SetConfig+0x118>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <TIM_Base_SetConfig+0x11c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <TIM_Base_SetConfig+0x120>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3a      	ldr	r2, [pc, #232]	; (80021b4 <TIM_Base_SetConfig+0x124>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d108      	bne.n	80020e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d027      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <TIM_Base_SetConfig+0x118>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d023      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <TIM_Base_SetConfig+0x11c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <TIM_Base_SetConfig+0x120>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <TIM_Base_SetConfig+0x124>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d017      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <TIM_Base_SetConfig+0x128>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a27      	ldr	r2, [pc, #156]	; (80021bc <TIM_Base_SetConfig+0x12c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <TIM_Base_SetConfig+0x130>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <TIM_Base_SetConfig+0x134>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <TIM_Base_SetConfig+0x138>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a23      	ldr	r2, [pc, #140]	; (80021cc <TIM_Base_SetConfig+0x13c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <TIM_Base_SetConfig+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0xf8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <TIM_Base_SetConfig+0x124>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	615a      	str	r2, [r3, #20]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40010400 	.word	0x40010400
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	40001800 	.word	0x40001800
 80021c8:	40001c00 	.word	0x40001c00
 80021cc:	40002000 	.word	0x40002000

080021d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e032      	b.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002220:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4313      	orrs	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <arm_biquad_cascade_df1_f32>:
void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8002282:	b480      	push	{r7}
 8002284:	b097      	sub	sp, #92	; 0x5c
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
  float32_t *pIn = pSrc;                         /*  source pointer            */
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	657b      	str	r3, [r7, #84]	; 0x54
  float32_t *pOut = pDst;                        /*  destination pointer       */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	653b      	str	r3, [r7, #80]	; 0x50
  float32_t *pState = S->pState;                 /*  pState pointer            */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t acc;                                 /*  Simulates the accumulator */
  float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
  float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
  float32_t Xn;                                  /*  temporary input           */
  uint32_t sample, stage = S->numStages;         /*  loop counters             */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  do
  {
    /* Reading the coefficients */
    b0 = *pCoeffs++;
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ac:	1d1a      	adds	r2, r3, #4
 80022ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    b1 = *pCoeffs++;
 80022b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b6:	1d1a      	adds	r2, r3, #4
 80022b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
    b2 = *pCoeffs++;
 80022be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c0:	1d1a      	adds	r2, r3, #4
 80022c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    a1 = *pCoeffs++;
 80022c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ca:	1d1a      	adds	r2, r3, #4
 80022cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	623b      	str	r3, [r7, #32]
    a2 = *pCoeffs++;
 80022d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d4:	1d1a      	adds	r2, r3, #4
 80022d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	61fb      	str	r3, [r7, #28]

    /* Reading the pState values */
    Xn1 = pState[0];
 80022dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
    Xn2 = pState[1];
 80022e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
    Yn1 = pState[2];
 80022e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    Yn2 = pState[3];
 80022ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
     *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
     */

    sample = blockSize >> 2U;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (sample > 0U)
 80022fa:	e0ce      	b.n	800249a <arm_biquad_cascade_df1_f32+0x218>
    {
      /* Read the first input */
      Xn = *pIn++;
 80022fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fe:	1d1a      	adds	r2, r3, #4
 8002300:	657a      	str	r2, [r7, #84]	; 0x54
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 8002306:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800230a:	edd7 7a06 	vldr	s15, [r7, #24]
 800230e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002312:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002316:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002322:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002326:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800232a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002332:	edd7 6a08 	vldr	s13, [r7, #32]
 8002336:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800233a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002342:	edd7 6a07 	vldr	s13, [r7, #28]
 8002346:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800234a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002352:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 8002356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002358:	1d1a      	adds	r2, r3, #4
 800235a:	653a      	str	r2, [r7, #80]	; 0x50
 800235c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800235e:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the second input */
      Xn2 = *pIn++;
 8002360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002362:	1d1a      	adds	r2, r3, #4
 8002364:	657a      	str	r2, [r7, #84]	; 0x54
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	643b      	str	r3, [r7, #64]	; 0x40

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
 800236a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800236e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002376:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800237a:	edd7 7a06 	vldr	s15, [r7, #24]
 800237e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002382:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002386:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800238a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800238e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002396:	edd7 6a08 	vldr	s13, [r7, #32]
 800239a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800239e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80023aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 80023ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023bc:	1d1a      	adds	r2, r3, #4
 80023be:	653a      	str	r2, [r7, #80]	; 0x50
 80023c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023c2:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the third input */
      Xn1 = *pIn++;
 80023c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	657a      	str	r2, [r7, #84]	; 0x54
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	647b      	str	r3, [r7, #68]	; 0x44

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 80023ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80023d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023da:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80023de:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ea:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80023ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80023f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fa:	edd7 6a08 	vldr	s13, [r7, #32]
 80023fe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240a:	edd7 6a07 	vldr	s13, [r7, #28]
 800240e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn2;
 800241e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002420:	1d1a      	adds	r2, r3, #4
 8002422:	653a      	str	r2, [r7, #80]	; 0x50
 8002424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002426:	601a      	str	r2, [r3, #0]
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */

      /* Read the forth input */
      Xn = *pIn++;
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	657a      	str	r2, [r7, #84]	; 0x54
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 8002432:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002436:	edd7 7a06 	vldr	s15, [r7, #24]
 800243a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800243e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002442:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002452:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002462:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800246e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002472:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = Yn1;
 8002482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002484:	1d1a      	adds	r2, r3, #4
 8002486:	653a      	str	r2, [r7, #80]	; 0x50
 8002488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800248a:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:  */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 800248c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
      Xn1 = Xn;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	647b      	str	r3, [r7, #68]	; 0x44

      /* decrement the loop counter */
      sample--;
 8002494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002496:	3b01      	subs	r3, #1
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
    while (sample > 0U)
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f af2d 	bne.w	80022fc <arm_biquad_cascade_df1_f32+0x7a>

    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    sample = blockSize & 0x3U;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34

    while (sample > 0U)
 80024aa:	e03c      	b.n	8002526 <arm_biquad_cascade_df1_f32+0x2a4>
    {
      /* Read the input */
      Xn = *pIn++;
 80024ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ae:	1d1a      	adds	r2, r3, #4
 80024b0:	657a      	str	r2, [r7, #84]	; 0x54
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]

      /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
      acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 80024b6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80024be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80024d6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80024da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e2:	edd7 6a08 	vldr	s13, [r7, #32]
 80024e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80024f6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	edc7 7a05 	vstr	s15, [r7, #20]

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = acc;
 8002506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002508:	1d1a      	adds	r2, r3, #4
 800250a:	653a      	str	r2, [r7, #80]	; 0x50
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	601a      	str	r2, [r3, #0]
      /* The states should be updated as:    */
      /* Xn2 = Xn1    */
      /* Xn1 = Xn     */
      /* Yn2 = Yn1    */
      /* Yn1 = acc   */
      Xn2 = Xn1;
 8002510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002512:	643b      	str	r3, [r7, #64]	; 0x40
      Xn1 = Xn;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	647b      	str	r3, [r7, #68]	; 0x44
      Yn2 = Yn1;
 8002518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
      Yn1 = acc;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* decrement the loop counter */
      sample--;
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	3b01      	subs	r3, #1
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
    while (sample > 0U)
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1bf      	bne.n	80024ac <arm_biquad_cascade_df1_f32+0x22a>

    }

    /*  Store the updated state variables back into the pState array */
    *pState++ = Xn1;
 800252c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002534:	601a      	str	r2, [r3, #0]
    *pState++ = Xn2;
 8002536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002538:	1d1a      	adds	r2, r3, #4
 800253a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800253c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800253e:	601a      	str	r2, [r3, #0]
    *pState++ = Yn1;
 8002540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002548:	601a      	str	r2, [r3, #0]
    *pState++ = Yn2;
 800254a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254c:	1d1a      	adds	r2, r3, #4
 800254e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002552:	601a      	str	r2, [r3, #0]

    /*  The first stage goes from the input buffer to the output buffer. */
    /*  Subsequent numStages  occur in-place in the output buffer */
    pIn = pDst;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	657b      	str	r3, [r7, #84]	; 0x54

    /* Reset the output pointer */
    pOut = pDst;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	653b      	str	r3, [r7, #80]	; 0x50

    /* decrement the loop counter */
    stage--;
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	3b01      	subs	r3, #1
 8002560:	633b      	str	r3, [r7, #48]	; 0x30

  } while (stage > 0U);
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f aea0 	bne.w	80022aa <arm_biquad_cascade_df1_f32+0x28>

  } while (stage > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

}
 800256a:	bf00      	nop
 800256c:	375c      	adds	r7, #92	; 0x5c
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <arm_biquad_cascade_df1_init_f32>:
void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8002586:	7afa      	ldrb	r2, [r7, #11]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 4 * numStages */
  memset(pState, 0, (4U * (uint32_t) numStages) * sizeof(float32_t));
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	461a      	mov	r2, r3
 8002598:	2100      	movs	r1, #0
 800259a:	6838      	ldr	r0, [r7, #0]
 800259c:	f000 fee2 	bl	8003364 <memset>

  /* Assign state pointer */
  S->pState = pState;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	605a      	str	r2, [r3, #4]
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <INITfilteringCoeffs>:
int32_t sampleCurrentIndex = 0;

INPUT_STREAM_STATE_FLAG* inputStreamFrameReadyFlag;

void INITfilteringCoeffs(INPUT_STREAM_STATE_FLAG* inputStreamStateFlag, void (*overrunStreamCallback)())
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	int32_t i = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]

	inputStreamFrameReadyFlag = inputStreamStateFlag;
 80025be:	4a47      	ldr	r2, [pc, #284]	; (80026dc <INITfilteringCoeffs+0x12c>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6013      	str	r3, [r2, #0]

	*inputStreamFrameReadyFlag = INPUT_STREAM_NOTREADY;
 80025c4:	4b45      	ldr	r3, [pc, #276]	; (80026dc <INITfilteringCoeffs+0x12c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]

	overrunStreamPrt = overrunStreamCallback;
 80025cc:	4a44      	ldr	r2, [pc, #272]	; (80026e0 <INITfilteringCoeffs+0x130>)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6013      	str	r3, [r2, #0]

	arm_biquad_cascade_df1_init_f32(&S_1, 2, firCoeffs_1, firStateF32_1);
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <INITfilteringCoeffs+0x134>)
 80025d4:	4a44      	ldr	r2, [pc, #272]	; (80026e8 <INITfilteringCoeffs+0x138>)
 80025d6:	2102      	movs	r1, #2
 80025d8:	4844      	ldr	r0, [pc, #272]	; (80026ec <INITfilteringCoeffs+0x13c>)
 80025da:	f7ff ffcc 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S_2, 2, firCoeffs_2, firStateF32_2);
 80025de:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <INITfilteringCoeffs+0x140>)
 80025e0:	4a44      	ldr	r2, [pc, #272]	; (80026f4 <INITfilteringCoeffs+0x144>)
 80025e2:	2102      	movs	r1, #2
 80025e4:	4844      	ldr	r0, [pc, #272]	; (80026f8 <INITfilteringCoeffs+0x148>)
 80025e6:	f7ff ffc6 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S_3, 2, firCoeffs_3, firStateF32_3);
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <INITfilteringCoeffs+0x14c>)
 80025ec:	4a44      	ldr	r2, [pc, #272]	; (8002700 <INITfilteringCoeffs+0x150>)
 80025ee:	2102      	movs	r1, #2
 80025f0:	4844      	ldr	r0, [pc, #272]	; (8002704 <INITfilteringCoeffs+0x154>)
 80025f2:	f7ff ffc0 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S_4, 2, firCoeffs_4, firStateF32_4);
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <INITfilteringCoeffs+0x158>)
 80025f8:	4a44      	ldr	r2, [pc, #272]	; (800270c <INITfilteringCoeffs+0x15c>)
 80025fa:	2102      	movs	r1, #2
 80025fc:	4844      	ldr	r0, [pc, #272]	; (8002710 <INITfilteringCoeffs+0x160>)
 80025fe:	f7ff ffba 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S_5, 2, firCoeffs_5, firStateF32_5);
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <INITfilteringCoeffs+0x164>)
 8002604:	4a44      	ldr	r2, [pc, #272]	; (8002718 <INITfilteringCoeffs+0x168>)
 8002606:	2102      	movs	r1, #2
 8002608:	4844      	ldr	r0, [pc, #272]	; (800271c <INITfilteringCoeffs+0x16c>)
 800260a:	f7ff ffb4 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S_6, 2, firCoeffs_6, firStateF32_6);
 800260e:	4b44      	ldr	r3, [pc, #272]	; (8002720 <INITfilteringCoeffs+0x170>)
 8002610:	4a44      	ldr	r2, [pc, #272]	; (8002724 <INITfilteringCoeffs+0x174>)
 8002612:	2102      	movs	r1, #2
 8002614:	4844      	ldr	r0, [pc, #272]	; (8002728 <INITfilteringCoeffs+0x178>)
 8002616:	f7ff ffae 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S_7, 2, firCoeffs_7, firStateF32_7);
 800261a:	4b44      	ldr	r3, [pc, #272]	; (800272c <INITfilteringCoeffs+0x17c>)
 800261c:	4a44      	ldr	r2, [pc, #272]	; (8002730 <INITfilteringCoeffs+0x180>)
 800261e:	2102      	movs	r1, #2
 8002620:	4844      	ldr	r0, [pc, #272]	; (8002734 <INITfilteringCoeffs+0x184>)
 8002622:	f7ff ffa8 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	arm_biquad_cascade_df1_init_f32(&S_8, 2, firCoeffs_8, firStateF32_8);
 8002626:	4b44      	ldr	r3, [pc, #272]	; (8002738 <INITfilteringCoeffs+0x188>)
 8002628:	4a44      	ldr	r2, [pc, #272]	; (800273c <INITfilteringCoeffs+0x18c>)
 800262a:	2102      	movs	r1, #2
 800262c:	4844      	ldr	r0, [pc, #272]	; (8002740 <INITfilteringCoeffs+0x190>)
 800262e:	f7ff ffa2 	bl	8002576 <arm_biquad_cascade_df1_init_f32>

	//Initialize circular buffer pointers
	inputStream = &circularBuffers[0][0];
 8002632:	4b44      	ldr	r3, [pc, #272]	; (8002744 <INITfilteringCoeffs+0x194>)
 8002634:	4a44      	ldr	r2, [pc, #272]	; (8002748 <INITfilteringCoeffs+0x198>)
 8002636:	601a      	str	r2, [r3, #0]
	filterStreamSrc = &circularBuffers[1][0];
 8002638:	4b44      	ldr	r3, [pc, #272]	; (800274c <INITfilteringCoeffs+0x19c>)
 800263a:	4a45      	ldr	r2, [pc, #276]	; (8002750 <INITfilteringCoeffs+0x1a0>)
 800263c:	601a      	str	r2, [r3, #0]
	outputStream = &circularBuffers[2][0];
 800263e:	4b45      	ldr	r3, [pc, #276]	; (8002754 <INITfilteringCoeffs+0x1a4>)
 8002640:	4a45      	ldr	r2, [pc, #276]	; (8002758 <INITfilteringCoeffs+0x1a8>)
 8002642:	601a      	str	r2, [r3, #0]
	filterStreamDst = &circularBuffers[3][0];
 8002644:	4b45      	ldr	r3, [pc, #276]	; (800275c <INITfilteringCoeffs+0x1ac>)
 8002646:	4a46      	ldr	r2, [pc, #280]	; (8002760 <INITfilteringCoeffs+0x1b0>)
 8002648:	601a      	str	r2, [r3, #0]


	//Init SRC buffer with a mock sine signal
	for (i = 0; i < FRAME_SIZE; i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e02b      	b.n	80026a8 <INITfilteringCoeffs+0xf8>
		filterStreamSrc[i] = 2048 * sinf(FREC_TEST * 2 * PI * i / (FRAME_SIZE * 200));
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002764 <INITfilteringCoeffs+0x1b4>
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002662:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002768 <INITfilteringCoeffs+0x1b8>
 8002666:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800266a:	eeb0 0a66 	vmov.f32	s0, s13
 800266e:	f000 fe81 	bl	8003374 <sinf>
 8002672:	eeb0 7a40 	vmov.f32	s14, s0
 8002676:	4b35      	ldr	r3, [pc, #212]	; (800274c <INITfilteringCoeffs+0x19c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800276c <INITfilteringCoeffs+0x1bc>
 8002684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002688:	edc3 7a00 	vstr	s15, [r3]
		adcMockSignal[i] = filterStreamSrc[i];
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <INITfilteringCoeffs+0x19c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4935      	ldr	r1, [pc, #212]	; (8002770 <INITfilteringCoeffs+0x1c0>)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FRAME_SIZE; i++) {
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80026ae:	dbcf      	blt.n	8002650 <INITfilteringCoeffs+0xa0>
	}

	//Initialize gain for each band
	for (i = 0; i < 8; i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e009      	b.n	80026ca <INITfilteringCoeffs+0x11a>
	{
		bandGainArray[i] = 1;
 80026b6:	4a2f      	ldr	r2, [pc, #188]	; (8002774 <INITfilteringCoeffs+0x1c4>)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026c2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 8; i++)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b07      	cmp	r3, #7
 80026ce:	ddf2      	ble.n	80026b6 <INITfilteringCoeffs+0x106>
	}

	filterBuffers();
 80026d0:	f000 f852 	bl	8002778 <filterBuffers>
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200021e4 	.word	0x200021e4
 80026e0:	200021d0 	.word	0x200021d0
 80026e4:	2000016c 	.word	0x2000016c
 80026e8:	20000008 	.word	0x20000008
 80026ec:	2000222c 	.word	0x2000222c
 80026f0:	2000018c 	.word	0x2000018c
 80026f4:	20000030 	.word	0x20000030
 80026f8:	200021e8 	.word	0x200021e8
 80026fc:	200001ac 	.word	0x200001ac
 8002700:	20000058 	.word	0x20000058
 8002704:	200021d4 	.word	0x200021d4
 8002708:	200001cc 	.word	0x200001cc
 800270c:	20000080 	.word	0x20000080
 8002710:	200021c4 	.word	0x200021c4
 8002714:	200001ec 	.word	0x200001ec
 8002718:	200000a8 	.word	0x200000a8
 800271c:	20002214 	.word	0x20002214
 8002720:	2000020c 	.word	0x2000020c
 8002724:	200000d0 	.word	0x200000d0
 8002728:	200021b4 	.word	0x200021b4
 800272c:	2000022c 	.word	0x2000022c
 8002730:	200000f8 	.word	0x200000f8
 8002734:	20002220 	.word	0x20002220
 8002738:	2000024c 	.word	0x2000024c
 800273c:	20000120 	.word	0x20000120
 8002740:	2000223c 	.word	0x2000223c
 8002744:	20002238 	.word	0x20002238
 8002748:	200008b4 	.word	0x200008b4
 800274c:	200021c0 	.word	0x200021c0
 8002750:	20000ef4 	.word	0x20000ef4
 8002754:	200021e0 	.word	0x200021e0
 8002758:	20001534 	.word	0x20001534
 800275c:	20002888 	.word	0x20002888
 8002760:	20001b74 	.word	0x20001b74
 8002764:	45c4597c 	.word	0x45c4597c
 8002768:	479c4000 	.word	0x479c4000
 800276c:	45000000 	.word	0x45000000
 8002770:	20002248 	.word	0x20002248
 8002774:	200021f4 	.word	0x200021f4

08002778 <filterBuffers>:

void filterBuffers()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
	int32_t i = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
	static float32_t staging_buffer[FRAME_SIZE];

	arm_biquad_cascade_df1_f32(&S_1, filterStreamSrc, filterStreamDst,
 8002782:	4b9f      	ldr	r3, [pc, #636]	; (8002a00 <filterBuffers+0x288>)
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	4b9f      	ldr	r3, [pc, #636]	; (8002a04 <filterBuffers+0x28c>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800278e:	489e      	ldr	r0, [pc, #632]	; (8002a08 <filterBuffers+0x290>)
 8002790:	f7ff fd77 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	e014      	b.n	80027c4 <filterBuffers+0x4c>
		staging_buffer[i] = filterStreamDst[i] * bandGainArray[0];
 800279a:	4b9a      	ldr	r3, [pc, #616]	; (8002a04 <filterBuffers+0x28c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	ed93 7a00 	vldr	s14, [r3]
 80027a8:	4b98      	ldr	r3, [pc, #608]	; (8002a0c <filterBuffers+0x294>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	4a97      	ldr	r2, [pc, #604]	; (8002a10 <filterBuffers+0x298>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3301      	adds	r3, #1
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80027ca:	dbe6      	blt.n	800279a <filterBuffers+0x22>
	}

	arm_biquad_cascade_df1_f32(&S_2, filterStreamSrc, filterStreamDst,
 80027cc:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <filterBuffers+0x288>)
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <filterBuffers+0x28c>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80027d8:	488e      	ldr	r0, [pc, #568]	; (8002a14 <filterBuffers+0x29c>)
 80027da:	f7ff fd52 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	e01c      	b.n	800281e <filterBuffers+0xa6>
		staging_buffer[i] += filterStreamDst[i] * bandGainArray[1];
 80027e4:	4a8a      	ldr	r2, [pc, #552]	; (8002a10 <filterBuffers+0x298>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	ed93 7a00 	vldr	s14, [r3]
 80027f0:	4b84      	ldr	r3, [pc, #528]	; (8002a04 <filterBuffers+0x28c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	edd3 6a00 	vldr	s13, [r3]
 80027fe:	4b83      	ldr	r3, [pc, #524]	; (8002a0c <filterBuffers+0x294>)
 8002800:	edd3 7a01 	vldr	s15, [r3, #4]
 8002804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280c:	4a80      	ldr	r2, [pc, #512]	; (8002a10 <filterBuffers+0x298>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3301      	adds	r3, #1
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002824:	dbde      	blt.n	80027e4 <filterBuffers+0x6c>
	}

	arm_biquad_cascade_df1_f32(&S_3, filterStreamSrc, filterStreamDst,
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <filterBuffers+0x288>)
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <filterBuffers+0x28c>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002832:	4879      	ldr	r0, [pc, #484]	; (8002a18 <filterBuffers+0x2a0>)
 8002834:	f7ff fd25 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	e01c      	b.n	8002878 <filterBuffers+0x100>
		staging_buffer[i] += filterStreamDst[i] * bandGainArray[2];
 800283e:	4a74      	ldr	r2, [pc, #464]	; (8002a10 <filterBuffers+0x298>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	4b6e      	ldr	r3, [pc, #440]	; (8002a04 <filterBuffers+0x28c>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	edd3 6a00 	vldr	s13, [r3]
 8002858:	4b6c      	ldr	r3, [pc, #432]	; (8002a0c <filterBuffers+0x294>)
 800285a:	edd3 7a02 	vldr	s15, [r3, #8]
 800285e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	4a6a      	ldr	r2, [pc, #424]	; (8002a10 <filterBuffers+0x298>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3301      	adds	r3, #1
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800287e:	dbde      	blt.n	800283e <filterBuffers+0xc6>
	}

	arm_biquad_cascade_df1_f32(&S_4, filterStreamSrc, filterStreamDst,
 8002880:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <filterBuffers+0x288>)
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <filterBuffers+0x28c>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800288c:	4863      	ldr	r0, [pc, #396]	; (8002a1c <filterBuffers+0x2a4>)
 800288e:	f7ff fcf8 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	e01c      	b.n	80028d2 <filterBuffers+0x15a>
		staging_buffer[i] += filterStreamDst[i] * bandGainArray[3];
 8002898:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <filterBuffers+0x298>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	ed93 7a00 	vldr	s14, [r3]
 80028a4:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <filterBuffers+0x28c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	edd3 6a00 	vldr	s13, [r3]
 80028b2:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <filterBuffers+0x294>)
 80028b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80028b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <filterBuffers+0x298>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3301      	adds	r3, #1
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80028d8:	dbde      	blt.n	8002898 <filterBuffers+0x120>
	}

	arm_biquad_cascade_df1_f32(&S_5, filterStreamSrc, filterStreamDst,
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <filterBuffers+0x288>)
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <filterBuffers+0x28c>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80028e6:	484e      	ldr	r0, [pc, #312]	; (8002a20 <filterBuffers+0x2a8>)
 80028e8:	f7ff fccb 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	e01c      	b.n	800292c <filterBuffers+0x1b4>
		staging_buffer[i] += filterStreamDst[i] * bandGainArray[4];
 80028f2:	4a47      	ldr	r2, [pc, #284]	; (8002a10 <filterBuffers+0x298>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <filterBuffers+0x28c>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	edd3 6a00 	vldr	s13, [r3]
 800290c:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <filterBuffers+0x294>)
 800290e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <filterBuffers+0x298>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002932:	dbde      	blt.n	80028f2 <filterBuffers+0x17a>
	}

	arm_biquad_cascade_df1_f32(&S_6, filterStreamSrc, filterStreamDst,
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <filterBuffers+0x288>)
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <filterBuffers+0x28c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002940:	4838      	ldr	r0, [pc, #224]	; (8002a24 <filterBuffers+0x2ac>)
 8002942:	f7ff fc9e 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	e01c      	b.n	8002986 <filterBuffers+0x20e>
		staging_buffer[i] += filterStreamDst[i] * bandGainArray[5];
 800294c:	4a30      	ldr	r2, [pc, #192]	; (8002a10 <filterBuffers+0x298>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	ed93 7a00 	vldr	s14, [r3]
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <filterBuffers+0x28c>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	edd3 6a00 	vldr	s13, [r3]
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <filterBuffers+0x294>)
 8002968:	edd3 7a05 	vldr	s15, [r3, #20]
 800296c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <filterBuffers+0x298>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3301      	adds	r3, #1
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800298c:	dbde      	blt.n	800294c <filterBuffers+0x1d4>
	}

	arm_biquad_cascade_df1_f32(&S_7, filterStreamSrc, filterStreamDst,
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <filterBuffers+0x288>)
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <filterBuffers+0x28c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800299a:	4823      	ldr	r0, [pc, #140]	; (8002a28 <filterBuffers+0x2b0>)
 800299c:	f7ff fc71 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 80029a0:	2300      	movs	r3, #0
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e01c      	b.n	80029e0 <filterBuffers+0x268>
		staging_buffer[i] += filterStreamDst[i] * bandGainArray[6];
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <filterBuffers+0x298>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	ed93 7a00 	vldr	s14, [r3]
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <filterBuffers+0x28c>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	edd3 6a00 	vldr	s13, [r3]
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <filterBuffers+0x294>)
 80029c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80029c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <filterBuffers+0x298>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3301      	adds	r3, #1
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80029e6:	dbde      	blt.n	80029a6 <filterBuffers+0x22e>
	}

	arm_biquad_cascade_df1_f32(&S_8, filterStreamSrc, filterStreamDst,
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <filterBuffers+0x288>)
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <filterBuffers+0x28c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80029f4:	480d      	ldr	r0, [pc, #52]	; (8002a2c <filterBuffers+0x2b4>)
 80029f6:	f7ff fc44 	bl	8002282 <arm_biquad_cascade_df1_f32>
			FRAME_SIZE);

	for (i = 0; i < FRAME_SIZE; i++) {
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	e035      	b.n	8002a6c <filterBuffers+0x2f4>
 8002a00:	200021c0 	.word	0x200021c0
 8002a04:	20002888 	.word	0x20002888
 8002a08:	2000222c 	.word	0x2000222c
 8002a0c:	200021f4 	.word	0x200021f4
 8002a10:	20000270 	.word	0x20000270
 8002a14:	200021e8 	.word	0x200021e8
 8002a18:	200021d4 	.word	0x200021d4
 8002a1c:	200021c4 	.word	0x200021c4
 8002a20:	20002214 	.word	0x20002214
 8002a24:	200021b4 	.word	0x200021b4
 8002a28:	20002220 	.word	0x20002220
 8002a2c:	2000223c 	.word	0x2000223c
		filterStreamSrc[i] = staging_buffer[i] + (filterStreamDst[i] * bandGainArray[7]);
 8002a30:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <filterBuffers+0x310>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	ed93 7a00 	vldr	s14, [r3]
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <filterBuffers+0x314>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	edd3 6a00 	vldr	s13, [r3]
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <filterBuffers+0x318>)
 8002a4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <filterBuffers+0x31c>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a62:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < FRAME_SIZE; i++) {
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002a72:	dbdd      	blt.n	8002a30 <filterBuffers+0x2b8>
	}

	rotateBuffers();
 8002a74:	f000 f812 	bl	8002a9c <rotateBuffers>

	*inputStreamFrameReadyFlag = INPUT_STREAM_NOTREADY;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <filterBuffers+0x320>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000270 	.word	0x20000270
 8002a8c:	20002888 	.word	0x20002888
 8002a90:	200021f4 	.word	0x200021f4
 8002a94:	200021c0 	.word	0x200021c0
 8002a98:	200021e4 	.word	0x200021e4

08002a9c <rotateBuffers>:

void rotateBuffers()
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
static char i = 2;

	switch (i)
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <rotateBuffers+0x7c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d014      	beq.n	8002ad2 <rotateBuffers+0x36>
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d022      	beq.n	8002af2 <rotateBuffers+0x56>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d000      	beq.n	8002ab2 <rotateBuffers+0x16>
		filterStreamSrc = &circularBuffers[0][0];
		outputStream = &circularBuffers[1][0];
		i = 0;
		break;
	}
}
 8002ab0:	e02c      	b.n	8002b0c <rotateBuffers+0x70>
		inputStream = &circularBuffers[1][0];
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <rotateBuffers+0x80>)
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <rotateBuffers+0x84>)
 8002ab6:	601a      	str	r2, [r3, #0]
		filterStreamSrc = &circularBuffers[2][0];
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <rotateBuffers+0x88>)
 8002aba:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <rotateBuffers+0x8c>)
 8002abc:	601a      	str	r2, [r3, #0]
		outputStream = &circularBuffers[0][0];
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <rotateBuffers+0x90>)
 8002ac0:	4a1b      	ldr	r2, [pc, #108]	; (8002b30 <rotateBuffers+0x94>)
 8002ac2:	601a      	str	r2, [r3, #0]
		i++;
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <rotateBuffers+0x7c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <rotateBuffers+0x7c>)
 8002ace:	701a      	strb	r2, [r3, #0]
		break;
 8002ad0:	e01c      	b.n	8002b0c <rotateBuffers+0x70>
		inputStream = &circularBuffers[0][0];
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <rotateBuffers+0x80>)
 8002ad4:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <rotateBuffers+0x94>)
 8002ad6:	601a      	str	r2, [r3, #0]
		filterStreamSrc = &circularBuffers[1][0];
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <rotateBuffers+0x88>)
 8002ada:	4a11      	ldr	r2, [pc, #68]	; (8002b20 <rotateBuffers+0x84>)
 8002adc:	601a      	str	r2, [r3, #0]
		outputStream = &circularBuffers[2][0];
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <rotateBuffers+0x90>)
 8002ae0:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <rotateBuffers+0x8c>)
 8002ae2:	601a      	str	r2, [r3, #0]
		i++;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <rotateBuffers+0x7c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <rotateBuffers+0x7c>)
 8002aee:	701a      	strb	r2, [r3, #0]
		break;
 8002af0:	e00c      	b.n	8002b0c <rotateBuffers+0x70>
		inputStream = &circularBuffers[2][0];
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <rotateBuffers+0x80>)
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <rotateBuffers+0x8c>)
 8002af6:	601a      	str	r2, [r3, #0]
		filterStreamSrc = &circularBuffers[0][0];
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <rotateBuffers+0x88>)
 8002afa:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <rotateBuffers+0x94>)
 8002afc:	601a      	str	r2, [r3, #0]
		outputStream = &circularBuffers[1][0];
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <rotateBuffers+0x90>)
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <rotateBuffers+0x84>)
 8002b02:	601a      	str	r2, [r3, #0]
		i = 0;
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <rotateBuffers+0x7c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
		break;
 8002b0a:	bf00      	nop
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000148 	.word	0x20000148
 8002b1c:	20002238 	.word	0x20002238
 8002b20:	20000ef4 	.word	0x20000ef4
 8002b24:	200021c0 	.word	0x200021c0
 8002b28:	20001534 	.word	0x20001534
 8002b2c:	200021e0 	.word	0x200021e0
 8002b30:	200008b4 	.word	0x200008b4

08002b34 <insertInputStreamSampleMock>:
	if (sampleCurrentIndex == 0)
	*inputStreamFrameReadyFlag =  INPUT_STREAM_READY;
}

void insertInputStreamSampleMock()
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	inputStream[sampleCurrentIndex] = adcMockSignal[sampleCurrentIndex];
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <insertInputStreamSampleMock+0x78>)
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	4919      	ldr	r1, [pc, #100]	; (8002bb0 <insertInputStreamSampleMock+0x7c>)
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	440a      	add	r2, r1
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	601a      	str	r2, [r3, #0]
	sampleCurrentIndex++;
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b5a:	6013      	str	r3, [r2, #0]
	sampleCurrentIndex %= FRAME_SIZE;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <insertInputStreamSampleMock+0x80>)
 8002b62:	fb83 1302 	smull	r1, r3, r3, r2
 8002b66:	11d9      	asrs	r1, r3, #7
 8002b68:	17d3      	asrs	r3, r2, #31
 8002b6a:	1acb      	subs	r3, r1, r3
 8002b6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b78:	6013      	str	r3, [r2, #0]
	if(*inputStreamFrameReadyFlag == INPUT_STREAM_READY && sampleCurrentIndex == 0)
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <insertInputStreamSampleMock+0x84>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <insertInputStreamSampleMock+0x60>
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <insertInputStreamSampleMock+0x60>
	{
		(*overrunStreamPrt)();
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <insertInputStreamSampleMock+0x88>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4798      	blx	r3
		return;
 8002b92:	e007      	b.n	8002ba4 <insertInputStreamSampleMock+0x70>
	}
	if (sampleCurrentIndex == 0)
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <insertInputStreamSampleMock+0x74>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <insertInputStreamSampleMock+0x70>
	*inputStreamFrameReadyFlag =  INPUT_STREAM_READY;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <insertInputStreamSampleMock+0x84>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
}
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2000026c 	.word	0x2000026c
 8002bac:	20002238 	.word	0x20002238
 8002bb0:	20002248 	.word	0x20002248
 8002bb4:	51eb851f 	.word	0x51eb851f
 8002bb8:	200021e4 	.word	0x200021e4
 8002bbc:	200021d0 	.word	0x200021d0

08002bc0 <getOutputStreamSample>:

float32_t * getOutputStreamSample(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	return &outputStream[sampleCurrentIndex];
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <getOutputStreamSample+0x1c>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <getOutputStreamSample+0x20>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	200021e0 	.word	0x200021e0
 8002be0:	2000026c 	.word	0x2000026c

08002be4 <adjustBandsGain>:

void adjustBandsGain(float32_t G0, float32_t G1, float32_t G2, float32_t G3, float32_t G4, float32_t G5, float32_t G6, float32_t G7)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	ed87 0a07 	vstr	s0, [r7, #28]
 8002bee:	edc7 0a06 	vstr	s1, [r7, #24]
 8002bf2:	ed87 1a05 	vstr	s2, [r7, #20]
 8002bf6:	edc7 1a04 	vstr	s3, [r7, #16]
 8002bfa:	ed87 2a03 	vstr	s4, [r7, #12]
 8002bfe:	edc7 2a02 	vstr	s5, [r7, #8]
 8002c02:	ed87 3a01 	vstr	s6, [r7, #4]
 8002c06:	edc7 3a00 	vstr	s7, [r7]
	bandGainArray[0] = G0;
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <adjustBandsGain+0x64>)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	6013      	str	r3, [r2, #0]
	bandGainArray[1] = G1;
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <adjustBandsGain+0x64>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6053      	str	r3, [r2, #4]
	bandGainArray[2] = G2;
 8002c16:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <adjustBandsGain+0x64>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6093      	str	r3, [r2, #8]
	bandGainArray[3] = G3;
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <adjustBandsGain+0x64>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	60d3      	str	r3, [r2, #12]
	bandGainArray[4] = G4;
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <adjustBandsGain+0x64>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6113      	str	r3, [r2, #16]
	bandGainArray[5] = G5;
 8002c28:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <adjustBandsGain+0x64>)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6153      	str	r3, [r2, #20]
	bandGainArray[6] = G6;
 8002c2e:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <adjustBandsGain+0x64>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6193      	str	r3, [r2, #24]
	bandGainArray[7] = G7;
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <adjustBandsGain+0x64>)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	61d3      	str	r3, [r2, #28]
}
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	200021f4 	.word	0x200021f4

08002c4c <main>:
void overrunStreamCallback(void);


INPUT_STREAM_STATE_FLAG inputStreamStateFlag;

int main(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c50:	f7fd fc4c 	bl	80004ec <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8002c54:	f000 f83e 	bl	8002cd4 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002c58:	f000 f924 	bl	8002ea4 <MX_GPIO_Init>
	MX_DAC_Init();
 8002c5c:	f000 f8b6 	bl	8002dcc <MX_DAC_Init>
	MX_TIM6_Init();
 8002c60:	f000 f8e8 	bl	8002e34 <MX_TIM6_Init>
	MX_ADC1_Init();
 8002c64:	f000 f9be 	bl	8002fe4 <MX_ADC1_Init>
	/* Initialize filter coefficients*/
	INITfilteringCoeffs(&inputStreamStateFlag, &overrunStreamCallback);
 8002c68:	4911      	ldr	r1, [pc, #68]	; (8002cb0 <main+0x64>)
 8002c6a:	4812      	ldr	r0, [pc, #72]	; (8002cb4 <main+0x68>)
 8002c6c:	f7ff fca0 	bl	80025b0 <INITfilteringCoeffs>
	/* Initialize interrupts */
	MX_NVIC_Init();
 8002c70:	f000 f8a0 	bl	8002db4 <MX_NVIC_Init>

	adjustBandsGain(1,1,1,1,1,1,1,1);
 8002c74:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8002c78:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8002c7c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8002c80:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8002c84:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002c88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002c8c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002c90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c94:	f7ff ffa6 	bl	8002be4 <adjustBandsGain>

	while (1) {

		if (inputStreamStateFlag == INPUT_STREAM_READY) {
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <main+0x68>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d1fb      	bne.n	8002c98 <main+0x4c>

			filterBuffers();
 8002ca0:	f7ff fd6a 	bl	8002778 <filterBuffers>

			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ca8:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <main+0x6c>)
 8002caa:	f7fe fc00 	bl	80014ae <HAL_GPIO_TogglePin>
		if (inputStreamStateFlag == INPUT_STREAM_READY) {
 8002cae:	e7f3      	b.n	8002c98 <main+0x4c>
 8002cb0:	08002cbd 	.word	0x08002cbd
 8002cb4:	20002928 	.word	0x20002928
 8002cb8:	40021800 	.word	0x40021800

08002cbc <overrunStreamCallback>:
	}

}

void overrunStreamCallback(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cc6:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <overrunStreamCallback+0x14>)
 8002cc8:	f7fe fbd8 	bl	800147c <HAL_GPIO_WritePin>
	while(1);
 8002ccc:	e7fe      	b.n	8002ccc <overrunStreamCallback+0x10>
 8002cce:	bf00      	nop
 8002cd0:	40021800 	.word	0x40021800

08002cd4 <SystemClock_Config>:
}

void SystemClock_Config(void) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b094      	sub	sp, #80	; 0x50
 8002cd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002cda:	f107 0320 	add.w	r3, r7, #32
 8002cde:	2230      	movs	r2, #48	; 0x30
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fb3e 	bl	8003364 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <SystemClock_Config+0xd8>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <SystemClock_Config+0xd8>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6413      	str	r3, [r2, #64]	; 0x40
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <SystemClock_Config+0xd8>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <SystemClock_Config+0xdc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <SystemClock_Config+0xdc>)
 8002d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b22      	ldr	r3, [pc, #136]	; (8002db0 <SystemClock_Config+0xdc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002d44:	2304      	movs	r3, #4
 8002d46:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002d48:	23b4      	movs	r3, #180	; 0xb4
 8002d4a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d50:	2304      	movs	r3, #4
 8002d52:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002d54:	f107 0320 	add.w	r3, r7, #32
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fc13 	bl	8001584 <HAL_RCC_OscConfig>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <SystemClock_Config+0x94>
		Error_Handler();
 8002d64:	f000 f996 	bl	8003094 <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002d68:	f7fe fbbc 	bl	80014e4 <HAL_PWREx_EnableOverDrive>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SystemClock_Config+0xa2>
		Error_Handler();
 8002d72:	f000 f98f 	bl	8003094 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002d76:	230f      	movs	r3, #15
 8002d78:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d86:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	2105      	movs	r1, #5
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe fe37 	bl	8001a08 <HAL_RCC_ClockConfig>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <SystemClock_Config+0xd0>
		Error_Handler();
 8002da0:	f000 f978 	bl	8003094 <Error_Handler>
	}

}
 8002da4:	bf00      	nop
 8002da6:	3750      	adds	r7, #80	; 0x50
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000

08002db4 <MX_NVIC_Init>:

static void MX_NVIC_Init(void) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2036      	movs	r0, #54	; 0x36
 8002dbe:	f7fe f824 	bl	8000e0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dc2:	2036      	movs	r0, #54	; 0x36
 8002dc4:	f7fe f83d 	bl	8000e42 <HAL_NVIC_EnableIRQ>
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <MX_DAC_Init>:

//DAC Output: PA5
static void MX_DAC_Init(void) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]

	hdac.Instance = DAC;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <MX_DAC_Init+0x60>)
 8002ddc:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <MX_DAC_Init+0x64>)
 8002dde:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8002de0:	4812      	ldr	r0, [pc, #72]	; (8002e2c <MX_DAC_Init+0x60>)
 8002de2:	f7fe f848 	bl	8000e76 <HAL_DAC_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_DAC_Init+0x24>
		Error_Handler();
 8002dec:	f000 f952 	bl	8003094 <Error_Handler>
	}

	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002df0:	2304      	movs	r3, #4
 8002df2:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8002df8:	463b      	mov	r3, r7
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	480b      	ldr	r0, [pc, #44]	; (8002e2c <MX_DAC_Init+0x60>)
 8002e00:	f7fe f915 	bl	800102e <HAL_DAC_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_DAC_Init+0x42>
		Error_Handler();
 8002e0a:	f000 f943 	bl	8003094 <Error_Handler>
	}

	if (HAL_DAC_Start(&hdac, DAC_CHANNEL_2) != HAL_OK) {
 8002e0e:	2110      	movs	r1, #16
 8002e10:	4806      	ldr	r0, [pc, #24]	; (8002e2c <MX_DAC_Init+0x60>)
 8002e12:	f7fe f852 	bl	8000eba <HAL_DAC_Start>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8002e16:	2300      	movs	r3, #0
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	4803      	ldr	r0, [pc, #12]	; (8002e2c <MX_DAC_Init+0x60>)
 8002e1e:	f7fe f953 	bl	80010c8 <HAL_DAC_SetValue>

}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200028d4 	.word	0x200028d4
 8002e30:	40007400 	.word	0x40007400

08002e34 <MX_TIM6_Init>:

static void MX_TIM6_Init(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]

	htim6.Instance = TIM6;
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e44:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <MX_TIM6_Init+0x6c>)
 8002e46:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1124; //1124 => Fs = 80KHz
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e56:	f240 4264 	movw	r2, #1124	; 0x464
 8002e5a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002e62:	480e      	ldr	r0, [pc, #56]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e64:	f7fe ff8a 	bl	8001d7c <HAL_TIM_Base_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8002e6e:	f000 f911 	bl	8003094 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e72:	2320      	movs	r3, #32
 8002e74:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e80:	f7ff f9a6 	bl	80021d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8002e8a:	f000 f903 	bl	8003094 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim6);
 8002e8e:	4803      	ldr	r0, [pc, #12]	; (8002e9c <MX_TIM6_Init+0x68>)
 8002e90:	f7fe ff9f 	bl	8001dd2 <HAL_TIM_Base_Start_IT>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200028e8 	.word	0x200028e8
 8002ea0:	40001000 	.word	0x40001000

08002ea4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b45      	ldr	r3, [pc, #276]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a44      	ldr	r2, [pc, #272]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a3d      	ldr	r2, [pc, #244]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a36      	ldr	r2, [pc, #216]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002f18:	f043 0320 	orr.w	r3, r3, #32
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_ADC3_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <MX_GPIO_Init+0x130>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f46:	2200      	movs	r2, #0
 8002f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f4c:	4822      	ldr	r0, [pc, #136]	; (8002fd8 <MX_GPIO_Init+0x134>)
 8002f4e:	f7fe fa95 	bl	800147c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8002f52:	2200      	movs	r2, #0
 8002f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f58:	481f      	ldr	r0, [pc, #124]	; (8002fd8 <MX_GPIO_Init+0x134>)
 8002f5a:	f7fe fa8f 	bl	800147c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f66:	2302      	movs	r3, #2
 8002f68:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4619      	mov	r1, r3
 8002f70:	481a      	ldr	r0, [pc, #104]	; (8002fdc <MX_GPIO_Init+0x138>)
 8002f72:	f7fe f8d9 	bl	8001128 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f84:	2303      	movs	r3, #3
 8002f86:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4812      	ldr	r0, [pc, #72]	; (8002fd8 <MX_GPIO_Init+0x134>)
 8002f90:	f7fe f8ca 	bl	8001128 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4619      	mov	r1, r3
 8002fac:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <MX_GPIO_Init+0x134>)
 8002fae:	f7fe f8bb 	bl	8001128 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
 8002fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4806      	ldr	r0, [pc, #24]	; (8002fe0 <MX_GPIO_Init+0x13c>)
 8002fc8:	f7fe f8ae 	bl	8001128 <HAL_GPIO_Init>

}
 8002fcc:	bf00      	nop
 8002fce:	3728      	adds	r7, #40	; 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40021400 	.word	0x40021400

08002fe4 <MX_ADC1_Init>:

static void MX_ADC1_Init() {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002fea:	463b      	mov	r3, r7
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADCx;
 8002ff6:	4b25      	ldr	r3, [pc, #148]	; (800308c <MX_ADC1_Init+0xa8>)
 8002ff8:	4a25      	ldr	r2, [pc, #148]	; (8003090 <MX_ADC1_Init+0xac>)
 8002ffa:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ffc:	4b23      	ldr	r3, [pc, #140]	; (800308c <MX_ADC1_Init+0xa8>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <MX_ADC1_Init+0xa8>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <MX_ADC1_Init+0xa8>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <MX_ADC1_Init+0xa8>)
 8003010:	2201      	movs	r2, #1
 8003012:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <MX_ADC1_Init+0xa8>)
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.NbrOfDiscConversion = 0;
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <MX_ADC1_Init+0xa8>)
 800301e:	2200      	movs	r2, #0
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <MX_ADC1_Init+0xa8>)
 8003024:	2200      	movs	r2, #0
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <MX_ADC1_Init+0xa8>)
 800302a:	2200      	movs	r2, #0
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <MX_ADC1_Init+0xa8>)
 8003030:	2200      	movs	r2, #0
 8003032:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <MX_ADC1_Init+0xa8>)
 8003036:	2201      	movs	r2, #1
 8003038:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <MX_ADC1_Init+0xa8>)
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = DISABLE;
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <MX_ADC1_Init+0xa8>)
 8003044:	2200      	movs	r2, #0
 8003046:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003048:	4810      	ldr	r0, [pc, #64]	; (800308c <MX_ADC1_Init+0xa8>)
 800304a:	f7fd fac1 	bl	80005d0 <HAL_ADC_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_ADC1_Init+0x74>
		Error_Handler();
 8003054:	f000 f81e 	bl	8003094 <Error_Handler>
	}

	sConfig.Channel = ADCx_CHANNEL;
 8003058:	2308      	movs	r3, #8
 800305a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800305c:	2301      	movs	r3, #1
 800305e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003060:	2301      	movs	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
	sConfig.Offset = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003068:	463b      	mov	r3, r7
 800306a:	4619      	mov	r1, r3
 800306c:	4807      	ldr	r0, [pc, #28]	; (800308c <MX_ADC1_Init+0xa8>)
 800306e:	f7fd fbc3 	bl	80007f8 <HAL_ADC_ConfigChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_ADC1_Init+0x98>
		Error_Handler();
 8003078:	f000 f80c 	bl	8003094 <Error_Handler>
	}

	HAL_ADC_Start(&hadc1);
 800307c:	4803      	ldr	r0, [pc, #12]	; (800308c <MX_ADC1_Init+0xa8>)
 800307e:	f7fd faf5 	bl	800066c <HAL_ADC_Start>
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2000288c 	.word	0x2000288c
 8003090:	40012200 	.word	0x40012200

08003094 <Error_Handler>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
}

void Error_Handler(void) {
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_MspInit+0x4c>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <HAL_MspInit+0x4c>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_MspInit+0x4c>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_MspInit+0x4c>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <HAL_MspInit+0x4c>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6413      	str	r3, [r2, #64]	; 0x40
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_MspInit+0x4c>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a17      	ldr	r2, [pc, #92]	; (8003170 <HAL_DAC_MspInit+0x7c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d127      	bne.n	8003166 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_DAC_MspInit+0x80>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a15      	ldr	r2, [pc, #84]	; (8003174 <HAL_DAC_MspInit+0x80>)
 8003120:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_DAC_MspInit+0x80>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_DAC_MspInit+0x80>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_DAC_MspInit+0x80>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_DAC_MspInit+0x80>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800314e:	2320      	movs	r3, #32
 8003150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003152:	2303      	movs	r3, #3
 8003154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	; (8003178 <HAL_DAC_MspInit+0x84>)
 8003162:	f7fd ffe1 	bl	8001128 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40007400 	.word	0x40007400
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000

0800317c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <HAL_TIM_Base_MspInit+0x3c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10d      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_TIM_Base_MspInit+0x40>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a09      	ldr	r2, [pc, #36]	; (80031bc <HAL_TIM_Base_MspInit+0x40>)
 8003198:	f043 0310 	orr.w	r3, r3, #16
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_TIM_Base_MspInit+0x40>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40001000 	.word	0x40001000
 80031bc:	40023800 	.word	0x40023800

080031c0 <NMI_Handler>:

extern DAC_HandleTypeDef hdac;
extern TIM_HandleTypeDef htim6;
extern ADC_HandleTypeDef hadc1;

void NMI_Handler(void) {
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HardFault_Handler>:

void HardFault_Handler(void) {
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
	while (1) {
 80031d2:	e7fe      	b.n	80031d2 <HardFault_Handler+0x4>

080031d4 <MemManage_Handler>:
	}
}

void MemManage_Handler(void) {
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
	while (1) {
 80031d8:	e7fe      	b.n	80031d8 <MemManage_Handler+0x4>

080031da <BusFault_Handler>:
	}
}

void BusFault_Handler(void) {
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
	while (1) {
 80031de:	e7fe      	b.n	80031de <BusFault_Handler+0x4>

080031e0 <UsageFault_Handler>:
	}
}

void UsageFault_Handler(void) {
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
	while (1) {
 80031e4:	e7fe      	b.n	80031e4 <UsageFault_Handler+0x4>

080031e6 <SVC_Handler>:
	}
}

void SVC_Handler(void) {
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <DebugMon_Handler>:

void DebugMon_Handler(void) {
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <PendSV_Handler>:

void PendSV_Handler(void) {
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
}
 8003206:	bf00      	nop
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <SysTick_Handler>:

void SysTick_Handler(void) {
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003214:	f7fd f9bc 	bl	8000590 <HAL_IncTick>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
		adcSample = HAL_ADC_GetValue(&hadc1);
		insertInputStreamSample((uint32_t *)&adcSample);
	}
	 */

	insertInputStreamSampleMock();
 8003220:	f7ff fc88 	bl	8002b34 <insertInputStreamSampleMock>

	// Escribo una muestra del buffer de salida al DAC
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2048 + (int32_t)*getOutputStreamSample());
 8003224:	f7ff fccc 	bl	8002bc0 <getOutputStreamSample>
 8003228:	4603      	mov	r3, r0
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003232:	ee17 3a90 	vmov	r3, s15
 8003236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323a:	2200      	movs	r2, #0
 800323c:	2110      	movs	r1, #16
 800323e:	4805      	ldr	r0, [pc, #20]	; (8003254 <TIM6_DAC_IRQHandler+0x38>)
 8003240:	f7fd ff42 	bl	80010c8 <HAL_DAC_SetValue>

	HAL_DAC_IRQHandler(&hdac);
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <TIM6_DAC_IRQHandler+0x38>)
 8003246:	f7fd fe9e 	bl	8000f86 <HAL_DAC_IRQHandler>
	HAL_TIM_IRQHandler(&htim6);
 800324a:	4803      	ldr	r0, [pc, #12]	; (8003258 <TIM6_DAC_IRQHandler+0x3c>)
 800324c:	f7fe fde5 	bl	8001e1a <HAL_TIM_IRQHandler>
}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200028d4 	.word	0x200028d4
 8003258:	200028e8 	.word	0x200028e8

0800325c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <SystemInit+0x60>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <SystemInit+0x60>)
 8003268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800326c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <SystemInit+0x64>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <SystemInit+0x64>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <SystemInit+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <SystemInit+0x64>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <SystemInit+0x64>)
 8003288:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800328c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003290:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <SystemInit+0x64>)
 8003294:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <SystemInit+0x68>)
 8003296:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <SystemInit+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <SystemInit+0x64>)
 800329e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <SystemInit+0x64>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <SystemInit+0x60>)
 80032ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032b0:	609a      	str	r2, [r3, #8]
#endif
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000ed00 	.word	0xe000ed00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	24003010 	.word	0x24003010

080032c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80032c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003300 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ce:	e003      	b.n	80032d8 <LoopCopyDataInit>

080032d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032d6:	3104      	adds	r1, #4

080032d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032d8:	480b      	ldr	r0, [pc, #44]	; (8003308 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032e0:	d3f6      	bcc.n	80032d0 <CopyDataInit>
  ldr  r2, =_sbss
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032e4:	e002      	b.n	80032ec <LoopFillZerobss>

080032e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032e8:	f842 3b04 	str.w	r3, [r2], #4

080032ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032f0:	d3f9      	bcc.n	80032e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032f2:	f7ff ffb3 	bl	800325c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032f6:	f000 f811 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fa:	f7ff fca7 	bl	8002c4c <main>
  bx  lr    
 80032fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003300:	2002ffff 	.word	0x2002ffff
  ldr  r3, =_sidata
 8003304:	08004214 	.word	0x08004214
  ldr  r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800330c:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8003310:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8003314:	2000292c 	.word	0x2000292c

08003318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003318:	e7fe      	b.n	8003318 <ADC_IRQHandler>
	...

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4e0d      	ldr	r6, [pc, #52]	; (8003354 <__libc_init_array+0x38>)
 8003320:	4c0d      	ldr	r4, [pc, #52]	; (8003358 <__libc_init_array+0x3c>)
 8003322:	1ba4      	subs	r4, r4, r6
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	2500      	movs	r5, #0
 8003328:	42a5      	cmp	r5, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	4e0b      	ldr	r6, [pc, #44]	; (800335c <__libc_init_array+0x40>)
 800332e:	4c0c      	ldr	r4, [pc, #48]	; (8003360 <__libc_init_array+0x44>)
 8003330:	f000 fd6c 	bl	8003e0c <_init>
 8003334:	1ba4      	subs	r4, r4, r6
 8003336:	10a4      	asrs	r4, r4, #2
 8003338:	2500      	movs	r5, #0
 800333a:	42a5      	cmp	r5, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003344:	4798      	blx	r3
 8003346:	3501      	adds	r5, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800334e:	4798      	blx	r3
 8003350:	3501      	adds	r5, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	0800420c 	.word	0x0800420c
 8003358:	0800420c 	.word	0x0800420c
 800335c:	0800420c 	.word	0x0800420c
 8003360:	08004210 	.word	0x08004210

08003364 <memset>:
 8003364:	4402      	add	r2, r0
 8003366:	4603      	mov	r3, r0
 8003368:	4293      	cmp	r3, r2
 800336a:	d100      	bne.n	800336e <memset+0xa>
 800336c:	4770      	bx	lr
 800336e:	f803 1b01 	strb.w	r1, [r3], #1
 8003372:	e7f9      	b.n	8003368 <memset+0x4>

08003374 <sinf>:
 8003374:	ee10 3a10 	vmov	r3, s0
 8003378:	b507      	push	{r0, r1, r2, lr}
 800337a:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <sinf+0x7c>)
 800337c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003380:	4293      	cmp	r3, r2
 8003382:	dc05      	bgt.n	8003390 <sinf+0x1c>
 8003384:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80033f4 <sinf+0x80>
 8003388:	2000      	movs	r0, #0
 800338a:	f000 fc41 	bl	8003c10 <__kernel_sinf>
 800338e:	e004      	b.n	800339a <sinf+0x26>
 8003390:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003394:	db04      	blt.n	80033a0 <sinf+0x2c>
 8003396:	ee30 0a40 	vsub.f32	s0, s0, s0
 800339a:	b003      	add	sp, #12
 800339c:	f85d fb04 	ldr.w	pc, [sp], #4
 80033a0:	4668      	mov	r0, sp
 80033a2:	f000 f829 	bl	80033f8 <__ieee754_rem_pio2f>
 80033a6:	f000 0003 	and.w	r0, r0, #3
 80033aa:	2801      	cmp	r0, #1
 80033ac:	d008      	beq.n	80033c0 <sinf+0x4c>
 80033ae:	2802      	cmp	r0, #2
 80033b0:	d00d      	beq.n	80033ce <sinf+0x5a>
 80033b2:	b9b0      	cbnz	r0, 80033e2 <sinf+0x6e>
 80033b4:	2001      	movs	r0, #1
 80033b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80033ba:	ed9d 0a00 	vldr	s0, [sp]
 80033be:	e7e4      	b.n	800338a <sinf+0x16>
 80033c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80033c4:	ed9d 0a00 	vldr	s0, [sp]
 80033c8:	f000 f942 	bl	8003650 <__kernel_cosf>
 80033cc:	e7e5      	b.n	800339a <sinf+0x26>
 80033ce:	2001      	movs	r0, #1
 80033d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80033d4:	ed9d 0a00 	vldr	s0, [sp]
 80033d8:	f000 fc1a 	bl	8003c10 <__kernel_sinf>
 80033dc:	eeb1 0a40 	vneg.f32	s0, s0
 80033e0:	e7db      	b.n	800339a <sinf+0x26>
 80033e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80033e6:	ed9d 0a00 	vldr	s0, [sp]
 80033ea:	f000 f931 	bl	8003650 <__kernel_cosf>
 80033ee:	e7f5      	b.n	80033dc <sinf+0x68>
 80033f0:	3f490fd8 	.word	0x3f490fd8
 80033f4:	00000000 	.word	0x00000000

080033f8 <__ieee754_rem_pio2f>:
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	ee10 6a10 	vmov	r6, s0
 80033fe:	4b86      	ldr	r3, [pc, #536]	; (8003618 <__ieee754_rem_pio2f+0x220>)
 8003400:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003404:	429c      	cmp	r4, r3
 8003406:	b087      	sub	sp, #28
 8003408:	4605      	mov	r5, r0
 800340a:	dc05      	bgt.n	8003418 <__ieee754_rem_pio2f+0x20>
 800340c:	2300      	movs	r3, #0
 800340e:	ed85 0a00 	vstr	s0, [r5]
 8003412:	6043      	str	r3, [r0, #4]
 8003414:	2000      	movs	r0, #0
 8003416:	e020      	b.n	800345a <__ieee754_rem_pio2f+0x62>
 8003418:	4b80      	ldr	r3, [pc, #512]	; (800361c <__ieee754_rem_pio2f+0x224>)
 800341a:	429c      	cmp	r4, r3
 800341c:	dc38      	bgt.n	8003490 <__ieee754_rem_pio2f+0x98>
 800341e:	2e00      	cmp	r6, #0
 8003420:	f024 040f 	bic.w	r4, r4, #15
 8003424:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003620 <__ieee754_rem_pio2f+0x228>
 8003428:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <__ieee754_rem_pio2f+0x22c>)
 800342a:	dd18      	ble.n	800345e <__ieee754_rem_pio2f+0x66>
 800342c:	429c      	cmp	r4, r3
 800342e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003432:	bf09      	itett	eq
 8003434:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8003628 <__ieee754_rem_pio2f+0x230>
 8003438:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800362c <__ieee754_rem_pio2f+0x234>
 800343c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003440:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8003630 <__ieee754_rem_pio2f+0x238>
 8003444:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003448:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800344c:	edc0 6a00 	vstr	s13, [r0]
 8003450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003454:	edc0 7a01 	vstr	s15, [r0, #4]
 8003458:	2001      	movs	r0, #1
 800345a:	b007      	add	sp, #28
 800345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345e:	429c      	cmp	r4, r3
 8003460:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003464:	bf09      	itett	eq
 8003466:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8003628 <__ieee754_rem_pio2f+0x230>
 800346a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800362c <__ieee754_rem_pio2f+0x234>
 800346e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003472:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8003630 <__ieee754_rem_pio2f+0x238>
 8003476:	ee77 6a87 	vadd.f32	s13, s15, s14
 800347a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800347e:	edc0 6a00 	vstr	s13, [r0]
 8003482:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003486:	edc0 7a01 	vstr	s15, [r0, #4]
 800348a:	f04f 30ff 	mov.w	r0, #4294967295
 800348e:	e7e4      	b.n	800345a <__ieee754_rem_pio2f+0x62>
 8003490:	4b68      	ldr	r3, [pc, #416]	; (8003634 <__ieee754_rem_pio2f+0x23c>)
 8003492:	429c      	cmp	r4, r3
 8003494:	dc71      	bgt.n	800357a <__ieee754_rem_pio2f+0x182>
 8003496:	f000 fc03 	bl	8003ca0 <fabsf>
 800349a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003638 <__ieee754_rem_pio2f+0x240>
 800349e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80034a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80034a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034aa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80034ae:	ee17 0a90 	vmov	r0, s15
 80034b2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8003620 <__ieee754_rem_pio2f+0x228>
 80034b6:	eeb1 7a46 	vneg.f32	s14, s12
 80034ba:	eea7 0a27 	vfma.f32	s0, s14, s15
 80034be:	281f      	cmp	r0, #31
 80034c0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800362c <__ieee754_rem_pio2f+0x234>
 80034c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80034cc:	ee16 3a90 	vmov	r3, s13
 80034d0:	dc1c      	bgt.n	800350c <__ieee754_rem_pio2f+0x114>
 80034d2:	1e47      	subs	r7, r0, #1
 80034d4:	4959      	ldr	r1, [pc, #356]	; (800363c <__ieee754_rem_pio2f+0x244>)
 80034d6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80034da:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80034de:	428a      	cmp	r2, r1
 80034e0:	d014      	beq.n	800350c <__ieee754_rem_pio2f+0x114>
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	ed95 7a00 	vldr	s14, [r5]
 80034e8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80034ec:	2e00      	cmp	r6, #0
 80034ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80034f2:	ed85 0a01 	vstr	s0, [r5, #4]
 80034f6:	dab0      	bge.n	800345a <__ieee754_rem_pio2f+0x62>
 80034f8:	eeb1 7a47 	vneg.f32	s14, s14
 80034fc:	eeb1 0a40 	vneg.f32	s0, s0
 8003500:	ed85 7a00 	vstr	s14, [r5]
 8003504:	ed85 0a01 	vstr	s0, [r5, #4]
 8003508:	4240      	negs	r0, r0
 800350a:	e7a6      	b.n	800345a <__ieee754_rem_pio2f+0x62>
 800350c:	15e4      	asrs	r4, r4, #23
 800350e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003512:	1aa2      	subs	r2, r4, r2
 8003514:	2a08      	cmp	r2, #8
 8003516:	dde4      	ble.n	80034e2 <__ieee754_rem_pio2f+0xea>
 8003518:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003628 <__ieee754_rem_pio2f+0x230>
 800351c:	eef0 6a40 	vmov.f32	s13, s0
 8003520:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003524:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003528:	eea7 0a27 	vfma.f32	s0, s14, s15
 800352c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003630 <__ieee754_rem_pio2f+0x238>
 8003530:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8003534:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003538:	eef0 7a40 	vmov.f32	s15, s0
 800353c:	ee15 3a90 	vmov	r3, s11
 8003540:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003544:	1aa4      	subs	r4, r4, r2
 8003546:	2c19      	cmp	r4, #25
 8003548:	dc04      	bgt.n	8003554 <__ieee754_rem_pio2f+0x15c>
 800354a:	edc5 5a00 	vstr	s11, [r5]
 800354e:	eeb0 0a66 	vmov.f32	s0, s13
 8003552:	e7c7      	b.n	80034e4 <__ieee754_rem_pio2f+0xec>
 8003554:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003640 <__ieee754_rem_pio2f+0x248>
 8003558:	eeb0 0a66 	vmov.f32	s0, s13
 800355c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8003560:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003564:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003568:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003644 <__ieee754_rem_pio2f+0x24c>
 800356c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8003570:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003574:	ed85 7a00 	vstr	s14, [r5]
 8003578:	e7b4      	b.n	80034e4 <__ieee754_rem_pio2f+0xec>
 800357a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800357e:	db06      	blt.n	800358e <__ieee754_rem_pio2f+0x196>
 8003580:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003584:	edc0 7a01 	vstr	s15, [r0, #4]
 8003588:	edc0 7a00 	vstr	s15, [r0]
 800358c:	e742      	b.n	8003414 <__ieee754_rem_pio2f+0x1c>
 800358e:	15e2      	asrs	r2, r4, #23
 8003590:	3a86      	subs	r2, #134	; 0x86
 8003592:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800359e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003648 <__ieee754_rem_pio2f+0x250>
 80035a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035aa:	ed8d 7a03 	vstr	s14, [sp, #12]
 80035ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80035b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80035ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035be:	ed8d 7a04 	vstr	s14, [sp, #16]
 80035c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	edcd 7a05 	vstr	s15, [sp, #20]
 80035d2:	d11e      	bne.n	8003612 <__ieee754_rem_pio2f+0x21a>
 80035d4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80035d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2302      	movne	r3, #2
 80035e2:	491a      	ldr	r1, [pc, #104]	; (800364c <__ieee754_rem_pio2f+0x254>)
 80035e4:	9101      	str	r1, [sp, #4]
 80035e6:	2102      	movs	r1, #2
 80035e8:	9100      	str	r1, [sp, #0]
 80035ea:	a803      	add	r0, sp, #12
 80035ec:	4629      	mov	r1, r5
 80035ee:	f000 f88d 	bl	800370c <__kernel_rem_pio2f>
 80035f2:	2e00      	cmp	r6, #0
 80035f4:	f6bf af31 	bge.w	800345a <__ieee754_rem_pio2f+0x62>
 80035f8:	edd5 7a00 	vldr	s15, [r5]
 80035fc:	eef1 7a67 	vneg.f32	s15, s15
 8003600:	edc5 7a00 	vstr	s15, [r5]
 8003604:	edd5 7a01 	vldr	s15, [r5, #4]
 8003608:	eef1 7a67 	vneg.f32	s15, s15
 800360c:	edc5 7a01 	vstr	s15, [r5, #4]
 8003610:	e77a      	b.n	8003508 <__ieee754_rem_pio2f+0x110>
 8003612:	2303      	movs	r3, #3
 8003614:	e7e5      	b.n	80035e2 <__ieee754_rem_pio2f+0x1ea>
 8003616:	bf00      	nop
 8003618:	3f490fd8 	.word	0x3f490fd8
 800361c:	4016cbe3 	.word	0x4016cbe3
 8003620:	3fc90f80 	.word	0x3fc90f80
 8003624:	3fc90fd0 	.word	0x3fc90fd0
 8003628:	37354400 	.word	0x37354400
 800362c:	37354443 	.word	0x37354443
 8003630:	2e85a308 	.word	0x2e85a308
 8003634:	43490f80 	.word	0x43490f80
 8003638:	3f22f984 	.word	0x3f22f984
 800363c:	08003e34 	.word	0x08003e34
 8003640:	2e85a300 	.word	0x2e85a300
 8003644:	248d3132 	.word	0x248d3132
 8003648:	43800000 	.word	0x43800000
 800364c:	08003eb4 	.word	0x08003eb4

08003650 <__kernel_cosf>:
 8003650:	ee10 3a10 	vmov	r3, s0
 8003654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003658:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800365c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003660:	da05      	bge.n	800366e <__kernel_cosf+0x1e>
 8003662:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003666:	ee17 2a90 	vmov	r2, s15
 800366a:	2a00      	cmp	r2, #0
 800366c:	d03b      	beq.n	80036e6 <__kernel_cosf+0x96>
 800366e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8003672:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003676:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80036ec <__kernel_cosf+0x9c>
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <__kernel_cosf+0xa0>)
 800367c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8003680:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80036f4 <__kernel_cosf+0xa4>
 8003684:	eea6 7a25 	vfma.f32	s14, s12, s11
 8003688:	4293      	cmp	r3, r2
 800368a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80036f8 <__kernel_cosf+0xa8>
 800368e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003692:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80036fc <__kernel_cosf+0xac>
 8003696:	eea5 7a86 	vfma.f32	s14, s11, s12
 800369a:	eddf 5a19 	vldr	s11, [pc, #100]	; 8003700 <__kernel_cosf+0xb0>
 800369e:	eee7 5a06 	vfma.f32	s11, s14, s12
 80036a2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003704 <__kernel_cosf+0xb4>
 80036a6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80036aa:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80036ae:	ee27 7a06 	vmul.f32	s14, s14, s12
 80036b2:	eee6 0a07 	vfma.f32	s1, s12, s14
 80036b6:	dc04      	bgt.n	80036c2 <__kernel_cosf+0x72>
 80036b8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80036bc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80036c0:	4770      	bx	lr
 80036c2:	4a11      	ldr	r2, [pc, #68]	; (8003708 <__kernel_cosf+0xb8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bfda      	itte	le
 80036c8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80036cc:	ee07 3a10 	vmovle	s14, r3
 80036d0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80036d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036d8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80036dc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80036e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80036e4:	4770      	bx	lr
 80036e6:	eeb0 0a66 	vmov.f32	s0, s13
 80036ea:	4770      	bx	lr
 80036ec:	ad47d74e 	.word	0xad47d74e
 80036f0:	3e999999 	.word	0x3e999999
 80036f4:	310f74f6 	.word	0x310f74f6
 80036f8:	b493f27c 	.word	0xb493f27c
 80036fc:	37d00d01 	.word	0x37d00d01
 8003700:	bab60b61 	.word	0xbab60b61
 8003704:	3d2aaaab 	.word	0x3d2aaaab
 8003708:	3f480000 	.word	0x3f480000

0800370c <__kernel_rem_pio2f>:
 800370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003710:	ed2d 8b04 	vpush	{d8-d9}
 8003714:	b0d7      	sub	sp, #348	; 0x15c
 8003716:	469b      	mov	fp, r3
 8003718:	460e      	mov	r6, r1
 800371a:	4bbe      	ldr	r3, [pc, #760]	; (8003a14 <__kernel_rem_pio2f+0x308>)
 800371c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800371e:	9002      	str	r0, [sp, #8]
 8003720:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8003724:	9865      	ldr	r0, [sp, #404]	; 0x194
 8003726:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8003a24 <__kernel_rem_pio2f+0x318>
 800372a:	1ed1      	subs	r1, r2, #3
 800372c:	2308      	movs	r3, #8
 800372e:	fb91 f1f3 	sdiv	r1, r1, r3
 8003732:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8003736:	f10b 3aff 	add.w	sl, fp, #4294967295
 800373a:	1c4c      	adds	r4, r1, #1
 800373c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8003740:	eba1 050a 	sub.w	r5, r1, sl
 8003744:	aa1a      	add	r2, sp, #104	; 0x68
 8003746:	eb09 070a 	add.w	r7, r9, sl
 800374a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800374e:	4696      	mov	lr, r2
 8003750:	2300      	movs	r3, #0
 8003752:	42bb      	cmp	r3, r7
 8003754:	dd0f      	ble.n	8003776 <__kernel_rem_pio2f+0x6a>
 8003756:	af42      	add	r7, sp, #264	; 0x108
 8003758:	2200      	movs	r2, #0
 800375a:	454a      	cmp	r2, r9
 800375c:	dc27      	bgt.n	80037ae <__kernel_rem_pio2f+0xa2>
 800375e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8003762:	eb0b 0302 	add.w	r3, fp, r2
 8003766:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800376a:	9d02      	ldr	r5, [sp, #8]
 800376c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8003a24 <__kernel_rem_pio2f+0x318>
 8003770:	f04f 0c00 	mov.w	ip, #0
 8003774:	e015      	b.n	80037a2 <__kernel_rem_pio2f+0x96>
 8003776:	42dd      	cmn	r5, r3
 8003778:	bf5d      	ittte	pl
 800377a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800377e:	ee07 2a90 	vmovpl	s15, r2
 8003782:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003786:	eef0 7a47 	vmovmi.f32	s15, s14
 800378a:	ecee 7a01 	vstmia	lr!, {s15}
 800378e:	3301      	adds	r3, #1
 8003790:	e7df      	b.n	8003752 <__kernel_rem_pio2f+0x46>
 8003792:	ecf5 6a01 	vldmia	r5!, {s13}
 8003796:	ed33 7a01 	vldmdb	r3!, {s14}
 800379a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800379e:	f10c 0c01 	add.w	ip, ip, #1
 80037a2:	45d4      	cmp	ip, sl
 80037a4:	ddf5      	ble.n	8003792 <__kernel_rem_pio2f+0x86>
 80037a6:	ece7 7a01 	vstmia	r7!, {s15}
 80037aa:	3201      	adds	r2, #1
 80037ac:	e7d5      	b.n	800375a <__kernel_rem_pio2f+0x4e>
 80037ae:	ab06      	add	r3, sp, #24
 80037b0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8003a20 <__kernel_rem_pio2f+0x314>
 80037ba:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8003a1c <__kernel_rem_pio2f+0x310>
 80037be:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80037c2:	9303      	str	r3, [sp, #12]
 80037c4:	464d      	mov	r5, r9
 80037c6:	ab56      	add	r3, sp, #344	; 0x158
 80037c8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80037cc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80037d0:	3f01      	subs	r7, #1
 80037d2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80037d6:	00bf      	lsls	r7, r7, #2
 80037d8:	ab56      	add	r3, sp, #344	; 0x158
 80037da:	19da      	adds	r2, r3, r7
 80037dc:	3a4c      	subs	r2, #76	; 0x4c
 80037de:	2300      	movs	r3, #0
 80037e0:	1ae9      	subs	r1, r5, r3
 80037e2:	2900      	cmp	r1, #0
 80037e4:	dc4c      	bgt.n	8003880 <__kernel_rem_pio2f+0x174>
 80037e6:	4620      	mov	r0, r4
 80037e8:	f000 faa4 	bl	8003d34 <scalbnf>
 80037ec:	eeb0 8a40 	vmov.f32	s16, s0
 80037f0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80037f4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80037f8:	f000 fa5a 	bl	8003cb0 <floorf>
 80037fc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003800:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003804:	2c00      	cmp	r4, #0
 8003806:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800380a:	edcd 7a01 	vstr	s15, [sp, #4]
 800380e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003812:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003816:	dd48      	ble.n	80038aa <__kernel_rem_pio2f+0x19e>
 8003818:	1e69      	subs	r1, r5, #1
 800381a:	ab06      	add	r3, sp, #24
 800381c:	f1c4 0008 	rsb	r0, r4, #8
 8003820:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8003824:	9a01      	ldr	r2, [sp, #4]
 8003826:	fa4c f300 	asr.w	r3, ip, r0
 800382a:	441a      	add	r2, r3
 800382c:	4083      	lsls	r3, r0
 800382e:	9201      	str	r2, [sp, #4]
 8003830:	ebac 0203 	sub.w	r2, ip, r3
 8003834:	ab06      	add	r3, sp, #24
 8003836:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800383a:	f1c4 0307 	rsb	r3, r4, #7
 800383e:	fa42 f803 	asr.w	r8, r2, r3
 8003842:	f1b8 0f00 	cmp.w	r8, #0
 8003846:	dd41      	ble.n	80038cc <__kernel_rem_pio2f+0x1c0>
 8003848:	9b01      	ldr	r3, [sp, #4]
 800384a:	2000      	movs	r0, #0
 800384c:	3301      	adds	r3, #1
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	4601      	mov	r1, r0
 8003852:	4285      	cmp	r5, r0
 8003854:	dc6d      	bgt.n	8003932 <__kernel_rem_pio2f+0x226>
 8003856:	2c00      	cmp	r4, #0
 8003858:	dd04      	ble.n	8003864 <__kernel_rem_pio2f+0x158>
 800385a:	2c01      	cmp	r4, #1
 800385c:	d07e      	beq.n	800395c <__kernel_rem_pio2f+0x250>
 800385e:	2c02      	cmp	r4, #2
 8003860:	f000 8086 	beq.w	8003970 <__kernel_rem_pio2f+0x264>
 8003864:	f1b8 0f02 	cmp.w	r8, #2
 8003868:	d130      	bne.n	80038cc <__kernel_rem_pio2f+0x1c0>
 800386a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800386e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003872:	b359      	cbz	r1, 80038cc <__kernel_rem_pio2f+0x1c0>
 8003874:	4620      	mov	r0, r4
 8003876:	f000 fa5d 	bl	8003d34 <scalbnf>
 800387a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800387e:	e025      	b.n	80038cc <__kernel_rem_pio2f+0x1c0>
 8003880:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003884:	a806      	add	r0, sp, #24
 8003886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800388a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800388e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003892:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003896:	ee10 1a10 	vmov	r1, s0
 800389a:	ed32 0a01 	vldmdb	r2!, {s0}
 800389e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80038a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80038a6:	3301      	adds	r3, #1
 80038a8:	e79a      	b.n	80037e0 <__kernel_rem_pio2f+0xd4>
 80038aa:	d106      	bne.n	80038ba <__kernel_rem_pio2f+0x1ae>
 80038ac:	1e6b      	subs	r3, r5, #1
 80038ae:	aa06      	add	r2, sp, #24
 80038b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038b4:	ea4f 2822 	mov.w	r8, r2, asr #8
 80038b8:	e7c3      	b.n	8003842 <__kernel_rem_pio2f+0x136>
 80038ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80038be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	da31      	bge.n	800392c <__kernel_rem_pio2f+0x220>
 80038c8:	f04f 0800 	mov.w	r8, #0
 80038cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80038d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d4:	f040 80a8 	bne.w	8003a28 <__kernel_rem_pio2f+0x31c>
 80038d8:	1e6b      	subs	r3, r5, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	4548      	cmp	r0, r9
 80038e0:	da4d      	bge.n	800397e <__kernel_rem_pio2f+0x272>
 80038e2:	2a00      	cmp	r2, #0
 80038e4:	f000 8087 	beq.w	80039f6 <__kernel_rem_pio2f+0x2ea>
 80038e8:	aa06      	add	r2, sp, #24
 80038ea:	3c08      	subs	r4, #8
 80038ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038f0:	2900      	cmp	r1, #0
 80038f2:	f000 808d 	beq.w	8003a10 <__kernel_rem_pio2f+0x304>
 80038f6:	4620      	mov	r0, r4
 80038f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80038fc:	9302      	str	r3, [sp, #8]
 80038fe:	f000 fa19 	bl	8003d34 <scalbnf>
 8003902:	9b02      	ldr	r3, [sp, #8]
 8003904:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003a20 <__kernel_rem_pio2f+0x314>
 8003908:	0099      	lsls	r1, r3, #2
 800390a:	aa42      	add	r2, sp, #264	; 0x108
 800390c:	1850      	adds	r0, r2, r1
 800390e:	1d05      	adds	r5, r0, #4
 8003910:	461c      	mov	r4, r3
 8003912:	2c00      	cmp	r4, #0
 8003914:	f280 80b8 	bge.w	8003a88 <__kernel_rem_pio2f+0x37c>
 8003918:	2500      	movs	r5, #0
 800391a:	1b5c      	subs	r4, r3, r5
 800391c:	2c00      	cmp	r4, #0
 800391e:	f2c0 80d8 	blt.w	8003ad2 <__kernel_rem_pio2f+0x3c6>
 8003922:	4f3d      	ldr	r7, [pc, #244]	; (8003a18 <__kernel_rem_pio2f+0x30c>)
 8003924:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8003a24 <__kernel_rem_pio2f+0x318>
 8003928:	2400      	movs	r4, #0
 800392a:	e0c6      	b.n	8003aba <__kernel_rem_pio2f+0x3ae>
 800392c:	f04f 0802 	mov.w	r8, #2
 8003930:	e78a      	b.n	8003848 <__kernel_rem_pio2f+0x13c>
 8003932:	ab06      	add	r3, sp, #24
 8003934:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003938:	b949      	cbnz	r1, 800394e <__kernel_rem_pio2f+0x242>
 800393a:	b12b      	cbz	r3, 8003948 <__kernel_rem_pio2f+0x23c>
 800393c:	aa06      	add	r2, sp, #24
 800393e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003942:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003946:	2301      	movs	r3, #1
 8003948:	3001      	adds	r0, #1
 800394a:	4619      	mov	r1, r3
 800394c:	e781      	b.n	8003852 <__kernel_rem_pio2f+0x146>
 800394e:	aa06      	add	r2, sp, #24
 8003950:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003954:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003958:	460b      	mov	r3, r1
 800395a:	e7f5      	b.n	8003948 <__kernel_rem_pio2f+0x23c>
 800395c:	1e68      	subs	r0, r5, #1
 800395e:	ab06      	add	r3, sp, #24
 8003960:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003968:	aa06      	add	r2, sp, #24
 800396a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800396e:	e779      	b.n	8003864 <__kernel_rem_pio2f+0x158>
 8003970:	1e68      	subs	r0, r5, #1
 8003972:	ab06      	add	r3, sp, #24
 8003974:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800397c:	e7f4      	b.n	8003968 <__kernel_rem_pio2f+0x25c>
 800397e:	a906      	add	r1, sp, #24
 8003980:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003984:	3801      	subs	r0, #1
 8003986:	430a      	orrs	r2, r1
 8003988:	e7a9      	b.n	80038de <__kernel_rem_pio2f+0x1d2>
 800398a:	f10c 0c01 	add.w	ip, ip, #1
 800398e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003992:	2a00      	cmp	r2, #0
 8003994:	d0f9      	beq.n	800398a <__kernel_rem_pio2f+0x27e>
 8003996:	eb0b 0305 	add.w	r3, fp, r5
 800399a:	aa1a      	add	r2, sp, #104	; 0x68
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	1898      	adds	r0, r3, r2
 80039a0:	3004      	adds	r0, #4
 80039a2:	1c69      	adds	r1, r5, #1
 80039a4:	3704      	adds	r7, #4
 80039a6:	2200      	movs	r2, #0
 80039a8:	4465      	add	r5, ip
 80039aa:	9005      	str	r0, [sp, #20]
 80039ac:	428d      	cmp	r5, r1
 80039ae:	f6ff af0a 	blt.w	80037c6 <__kernel_rem_pio2f+0xba>
 80039b2:	a81a      	add	r0, sp, #104	; 0x68
 80039b4:	eb02 0c03 	add.w	ip, r2, r3
 80039b8:	4484      	add	ip, r0
 80039ba:	9803      	ldr	r0, [sp, #12]
 80039bc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80039c0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80039c4:	9001      	str	r0, [sp, #4]
 80039c6:	ee07 0a90 	vmov	s15, r0
 80039ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ce:	9805      	ldr	r0, [sp, #20]
 80039d0:	edcc 7a00 	vstr	s15, [ip]
 80039d4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003a24 <__kernel_rem_pio2f+0x318>
 80039d8:	eb00 0802 	add.w	r8, r0, r2
 80039dc:	f04f 0c00 	mov.w	ip, #0
 80039e0:	45d4      	cmp	ip, sl
 80039e2:	dd0c      	ble.n	80039fe <__kernel_rem_pio2f+0x2f2>
 80039e4:	eb02 0c07 	add.w	ip, r2, r7
 80039e8:	a842      	add	r0, sp, #264	; 0x108
 80039ea:	4484      	add	ip, r0
 80039ec:	edcc 7a01 	vstr	s15, [ip, #4]
 80039f0:	3101      	adds	r1, #1
 80039f2:	3204      	adds	r2, #4
 80039f4:	e7da      	b.n	80039ac <__kernel_rem_pio2f+0x2a0>
 80039f6:	9b04      	ldr	r3, [sp, #16]
 80039f8:	f04f 0c01 	mov.w	ip, #1
 80039fc:	e7c7      	b.n	800398e <__kernel_rem_pio2f+0x282>
 80039fe:	ecfe 6a01 	vldmia	lr!, {s13}
 8003a02:	ed38 7a01 	vldmdb	r8!, {s14}
 8003a06:	f10c 0c01 	add.w	ip, ip, #1
 8003a0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003a0e:	e7e7      	b.n	80039e0 <__kernel_rem_pio2f+0x2d4>
 8003a10:	3b01      	subs	r3, #1
 8003a12:	e769      	b.n	80038e8 <__kernel_rem_pio2f+0x1dc>
 8003a14:	080041f8 	.word	0x080041f8
 8003a18:	080041cc 	.word	0x080041cc
 8003a1c:	43800000 	.word	0x43800000
 8003a20:	3b800000 	.word	0x3b800000
 8003a24:	00000000 	.word	0x00000000
 8003a28:	4260      	negs	r0, r4
 8003a2a:	eeb0 0a48 	vmov.f32	s0, s16
 8003a2e:	f000 f981 	bl	8003d34 <scalbnf>
 8003a32:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8003a1c <__kernel_rem_pio2f+0x310>
 8003a36:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	db1a      	blt.n	8003a76 <__kernel_rem_pio2f+0x36a>
 8003a40:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003a20 <__kernel_rem_pio2f+0x314>
 8003a44:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003a48:	aa06      	add	r2, sp, #24
 8003a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a4e:	a906      	add	r1, sp, #24
 8003a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a54:	3408      	adds	r4, #8
 8003a56:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003a62:	ee10 3a10 	vmov	r3, s0
 8003a66:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8003a6a:	1c6b      	adds	r3, r5, #1
 8003a6c:	ee17 2a90 	vmov	r2, s15
 8003a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a74:	e73f      	b.n	80038f6 <__kernel_rem_pio2f+0x1ea>
 8003a76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003a7a:	aa06      	add	r2, sp, #24
 8003a7c:	ee10 3a10 	vmov	r3, s0
 8003a80:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8003a84:	462b      	mov	r3, r5
 8003a86:	e736      	b.n	80038f6 <__kernel_rem_pio2f+0x1ea>
 8003a88:	aa06      	add	r2, sp, #24
 8003a8a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003a8e:	9202      	str	r2, [sp, #8]
 8003a90:	ee07 2a90 	vmov	s15, r2
 8003a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a98:	3c01      	subs	r4, #1
 8003a9a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003a9e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003aa2:	ed65 7a01 	vstmdb	r5!, {s15}
 8003aa6:	e734      	b.n	8003912 <__kernel_rem_pio2f+0x206>
 8003aa8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8003aac:	ecf7 6a01 	vldmia	r7!, {s13}
 8003ab0:	ed9c 7a00 	vldr	s14, [ip]
 8003ab4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003ab8:	3401      	adds	r4, #1
 8003aba:	454c      	cmp	r4, r9
 8003abc:	dc01      	bgt.n	8003ac2 <__kernel_rem_pio2f+0x3b6>
 8003abe:	42a5      	cmp	r5, r4
 8003ac0:	daf2      	bge.n	8003aa8 <__kernel_rem_pio2f+0x39c>
 8003ac2:	aa56      	add	r2, sp, #344	; 0x158
 8003ac4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8003ac8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8003acc:	3501      	adds	r5, #1
 8003ace:	3804      	subs	r0, #4
 8003ad0:	e723      	b.n	800391a <__kernel_rem_pio2f+0x20e>
 8003ad2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003ad4:	2a03      	cmp	r2, #3
 8003ad6:	d84d      	bhi.n	8003b74 <__kernel_rem_pio2f+0x468>
 8003ad8:	e8df f002 	tbb	[pc, r2]
 8003adc:	021f1f3e 	.word	0x021f1f3e
 8003ae0:	aa56      	add	r2, sp, #344	; 0x158
 8003ae2:	4411      	add	r1, r2
 8003ae4:	399c      	subs	r1, #156	; 0x9c
 8003ae6:	4608      	mov	r0, r1
 8003ae8:	461c      	mov	r4, r3
 8003aea:	2c00      	cmp	r4, #0
 8003aec:	dc5f      	bgt.n	8003bae <__kernel_rem_pio2f+0x4a2>
 8003aee:	4608      	mov	r0, r1
 8003af0:	461c      	mov	r4, r3
 8003af2:	2c01      	cmp	r4, #1
 8003af4:	dc6b      	bgt.n	8003bce <__kernel_rem_pio2f+0x4c2>
 8003af6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8003a24 <__kernel_rem_pio2f+0x318>
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	dc77      	bgt.n	8003bee <__kernel_rem_pio2f+0x4e2>
 8003afe:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003b02:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003b06:	f1b8 0f00 	cmp.w	r8, #0
 8003b0a:	d176      	bne.n	8003bfa <__kernel_rem_pio2f+0x4ee>
 8003b0c:	edc6 6a00 	vstr	s13, [r6]
 8003b10:	ed86 7a01 	vstr	s14, [r6, #4]
 8003b14:	edc6 7a02 	vstr	s15, [r6, #8]
 8003b18:	e02c      	b.n	8003b74 <__kernel_rem_pio2f+0x468>
 8003b1a:	aa56      	add	r2, sp, #344	; 0x158
 8003b1c:	4411      	add	r1, r2
 8003b1e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8003a24 <__kernel_rem_pio2f+0x318>
 8003b22:	399c      	subs	r1, #156	; 0x9c
 8003b24:	4618      	mov	r0, r3
 8003b26:	2800      	cmp	r0, #0
 8003b28:	da32      	bge.n	8003b90 <__kernel_rem_pio2f+0x484>
 8003b2a:	f1b8 0f00 	cmp.w	r8, #0
 8003b2e:	d035      	beq.n	8003b9c <__kernel_rem_pio2f+0x490>
 8003b30:	eef1 7a47 	vneg.f32	s15, s14
 8003b34:	edc6 7a00 	vstr	s15, [r6]
 8003b38:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8003b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b40:	a82f      	add	r0, sp, #188	; 0xbc
 8003b42:	2101      	movs	r1, #1
 8003b44:	428b      	cmp	r3, r1
 8003b46:	da2c      	bge.n	8003ba2 <__kernel_rem_pio2f+0x496>
 8003b48:	f1b8 0f00 	cmp.w	r8, #0
 8003b4c:	d001      	beq.n	8003b52 <__kernel_rem_pio2f+0x446>
 8003b4e:	eef1 7a67 	vneg.f32	s15, s15
 8003b52:	edc6 7a01 	vstr	s15, [r6, #4]
 8003b56:	e00d      	b.n	8003b74 <__kernel_rem_pio2f+0x468>
 8003b58:	aa56      	add	r2, sp, #344	; 0x158
 8003b5a:	4411      	add	r1, r2
 8003b5c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8003a24 <__kernel_rem_pio2f+0x318>
 8003b60:	399c      	subs	r1, #156	; 0x9c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	da0e      	bge.n	8003b84 <__kernel_rem_pio2f+0x478>
 8003b66:	f1b8 0f00 	cmp.w	r8, #0
 8003b6a:	d001      	beq.n	8003b70 <__kernel_rem_pio2f+0x464>
 8003b6c:	eef1 7a67 	vneg.f32	s15, s15
 8003b70:	edc6 7a00 	vstr	s15, [r6]
 8003b74:	9b01      	ldr	r3, [sp, #4]
 8003b76:	f003 0007 	and.w	r0, r3, #7
 8003b7a:	b057      	add	sp, #348	; 0x15c
 8003b7c:	ecbd 8b04 	vpop	{d8-d9}
 8003b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b84:	ed31 7a01 	vldmdb	r1!, {s14}
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b8e:	e7e8      	b.n	8003b62 <__kernel_rem_pio2f+0x456>
 8003b90:	ed71 7a01 	vldmdb	r1!, {s15}
 8003b94:	3801      	subs	r0, #1
 8003b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b9a:	e7c4      	b.n	8003b26 <__kernel_rem_pio2f+0x41a>
 8003b9c:	eef0 7a47 	vmov.f32	s15, s14
 8003ba0:	e7c8      	b.n	8003b34 <__kernel_rem_pio2f+0x428>
 8003ba2:	ecb0 7a01 	vldmia	r0!, {s14}
 8003ba6:	3101      	adds	r1, #1
 8003ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bac:	e7ca      	b.n	8003b44 <__kernel_rem_pio2f+0x438>
 8003bae:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003bb2:	ed70 6a01 	vldmdb	r0!, {s13}
 8003bb6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003bba:	3c01      	subs	r4, #1
 8003bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bc0:	ed00 7a01 	vstr	s14, [r0, #-4]
 8003bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc8:	edc0 7a00 	vstr	s15, [r0]
 8003bcc:	e78d      	b.n	8003aea <__kernel_rem_pio2f+0x3de>
 8003bce:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003bd2:	ed70 6a01 	vldmdb	r0!, {s13}
 8003bd6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003bda:	3c01      	subs	r4, #1
 8003bdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003be0:	ed00 7a01 	vstr	s14, [r0, #-4]
 8003be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be8:	edc0 7a00 	vstr	s15, [r0]
 8003bec:	e781      	b.n	8003af2 <__kernel_rem_pio2f+0x3e6>
 8003bee:	ed31 7a01 	vldmdb	r1!, {s14}
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bf8:	e77f      	b.n	8003afa <__kernel_rem_pio2f+0x3ee>
 8003bfa:	eef1 6a66 	vneg.f32	s13, s13
 8003bfe:	eeb1 7a47 	vneg.f32	s14, s14
 8003c02:	edc6 6a00 	vstr	s13, [r6]
 8003c06:	ed86 7a01 	vstr	s14, [r6, #4]
 8003c0a:	eef1 7a67 	vneg.f32	s15, s15
 8003c0e:	e781      	b.n	8003b14 <__kernel_rem_pio2f+0x408>

08003c10 <__kernel_sinf>:
 8003c10:	ee10 3a10 	vmov	r3, s0
 8003c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003c1c:	da04      	bge.n	8003c28 <__kernel_sinf+0x18>
 8003c1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003c22:	ee17 3a90 	vmov	r3, s15
 8003c26:	b35b      	cbz	r3, 8003c80 <__kernel_sinf+0x70>
 8003c28:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003c2c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003c84 <__kernel_sinf+0x74>
 8003c30:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003c88 <__kernel_sinf+0x78>
 8003c34:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003c38:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003c8c <__kernel_sinf+0x7c>
 8003c3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003c40:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003c90 <__kernel_sinf+0x80>
 8003c44:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003c48:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003c94 <__kernel_sinf+0x84>
 8003c4c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003c50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003c54:	b930      	cbnz	r0, 8003c64 <__kernel_sinf+0x54>
 8003c56:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003c98 <__kernel_sinf+0x88>
 8003c5a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003c5e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003c62:	4770      	bx	lr
 8003c64:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003c68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003c6c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003c70:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003c74:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003c9c <__kernel_sinf+0x8c>
 8003c78:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003c7c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	2f2ec9d3 	.word	0x2f2ec9d3
 8003c88:	b2d72f34 	.word	0xb2d72f34
 8003c8c:	3638ef1b 	.word	0x3638ef1b
 8003c90:	b9500d01 	.word	0xb9500d01
 8003c94:	3c088889 	.word	0x3c088889
 8003c98:	be2aaaab 	.word	0xbe2aaaab
 8003c9c:	3e2aaaab 	.word	0x3e2aaaab

08003ca0 <fabsf>:
 8003ca0:	ee10 3a10 	vmov	r3, s0
 8003ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca8:	ee00 3a10 	vmov	s0, r3
 8003cac:	4770      	bx	lr
	...

08003cb0 <floorf>:
 8003cb0:	ee10 3a10 	vmov	r3, s0
 8003cb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003cb8:	0dca      	lsrs	r2, r1, #23
 8003cba:	3a7f      	subs	r2, #127	; 0x7f
 8003cbc:	2a16      	cmp	r2, #22
 8003cbe:	dc2a      	bgt.n	8003d16 <floorf+0x66>
 8003cc0:	2a00      	cmp	r2, #0
 8003cc2:	da11      	bge.n	8003ce8 <floorf+0x38>
 8003cc4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003d28 <floorf+0x78>
 8003cc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ccc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd4:	dd05      	ble.n	8003ce2 <floorf+0x32>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da23      	bge.n	8003d22 <floorf+0x72>
 8003cda:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <floorf+0x7c>)
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	bf18      	it	ne
 8003ce0:	4613      	movne	r3, r2
 8003ce2:	ee00 3a10 	vmov	s0, r3
 8003ce6:	4770      	bx	lr
 8003ce8:	4911      	ldr	r1, [pc, #68]	; (8003d30 <floorf+0x80>)
 8003cea:	4111      	asrs	r1, r2
 8003cec:	420b      	tst	r3, r1
 8003cee:	d0fa      	beq.n	8003ce6 <floorf+0x36>
 8003cf0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003d28 <floorf+0x78>
 8003cf4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003cf8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d00:	ddef      	ble.n	8003ce2 <floorf+0x32>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfbe      	ittt	lt
 8003d06:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003d0a:	fa40 f202 	asrlt.w	r2, r0, r2
 8003d0e:	189b      	addlt	r3, r3, r2
 8003d10:	ea23 0301 	bic.w	r3, r3, r1
 8003d14:	e7e5      	b.n	8003ce2 <floorf+0x32>
 8003d16:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003d1a:	d3e4      	bcc.n	8003ce6 <floorf+0x36>
 8003d1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003d20:	4770      	bx	lr
 8003d22:	2300      	movs	r3, #0
 8003d24:	e7dd      	b.n	8003ce2 <floorf+0x32>
 8003d26:	bf00      	nop
 8003d28:	7149f2ca 	.word	0x7149f2ca
 8003d2c:	bf800000 	.word	0xbf800000
 8003d30:	007fffff 	.word	0x007fffff

08003d34 <scalbnf>:
 8003d34:	b508      	push	{r3, lr}
 8003d36:	ee10 2a10 	vmov	r2, s0
 8003d3a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8003d3e:	ed2d 8b02 	vpush	{d8}
 8003d42:	eef0 0a40 	vmov.f32	s1, s0
 8003d46:	d004      	beq.n	8003d52 <scalbnf+0x1e>
 8003d48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003d4c:	d306      	bcc.n	8003d5c <scalbnf+0x28>
 8003d4e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8003d52:	ecbd 8b02 	vpop	{d8}
 8003d56:	eeb0 0a60 	vmov.f32	s0, s1
 8003d5a:	bd08      	pop	{r3, pc}
 8003d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d60:	d21c      	bcs.n	8003d9c <scalbnf+0x68>
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <scalbnf+0xac>)
 8003d64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003de4 <scalbnf+0xb0>
 8003d68:	4298      	cmp	r0, r3
 8003d6a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003d6e:	db10      	blt.n	8003d92 <scalbnf+0x5e>
 8003d70:	ee10 2a90 	vmov	r2, s1
 8003d74:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003d78:	3b19      	subs	r3, #25
 8003d7a:	4403      	add	r3, r0
 8003d7c:	2bfe      	cmp	r3, #254	; 0xfe
 8003d7e:	dd0f      	ble.n	8003da0 <scalbnf+0x6c>
 8003d80:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003de8 <scalbnf+0xb4>
 8003d84:	eeb0 0a48 	vmov.f32	s0, s16
 8003d88:	f000 f834 	bl	8003df4 <copysignf>
 8003d8c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003d90:	e7df      	b.n	8003d52 <scalbnf+0x1e>
 8003d92:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003dec <scalbnf+0xb8>
 8003d96:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003d9a:	e7da      	b.n	8003d52 <scalbnf+0x1e>
 8003d9c:	0ddb      	lsrs	r3, r3, #23
 8003d9e:	e7ec      	b.n	8003d7a <scalbnf+0x46>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	dd06      	ble.n	8003db2 <scalbnf+0x7e>
 8003da4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003da8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003dac:	ee00 3a90 	vmov	s1, r3
 8003db0:	e7cf      	b.n	8003d52 <scalbnf+0x1e>
 8003db2:	f113 0f16 	cmn.w	r3, #22
 8003db6:	da06      	bge.n	8003dc6 <scalbnf+0x92>
 8003db8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003dbc:	4298      	cmp	r0, r3
 8003dbe:	dcdf      	bgt.n	8003d80 <scalbnf+0x4c>
 8003dc0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003dec <scalbnf+0xb8>
 8003dc4:	e7de      	b.n	8003d84 <scalbnf+0x50>
 8003dc6:	3319      	adds	r3, #25
 8003dc8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003dcc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003dd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003df0 <scalbnf+0xbc>
 8003dd4:	ee07 3a10 	vmov	s14, r3
 8003dd8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003ddc:	e7b9      	b.n	8003d52 <scalbnf+0x1e>
 8003dde:	bf00      	nop
 8003de0:	ffff3cb0 	.word	0xffff3cb0
 8003de4:	4c000000 	.word	0x4c000000
 8003de8:	7149f2ca 	.word	0x7149f2ca
 8003dec:	0da24260 	.word	0x0da24260
 8003df0:	33000000 	.word	0x33000000

08003df4 <copysignf>:
 8003df4:	ee10 3a10 	vmov	r3, s0
 8003df8:	ee10 2a90 	vmov	r2, s1
 8003dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e00:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e04:	4313      	orrs	r3, r2
 8003e06:	ee00 3a10 	vmov	s0, r3
 8003e0a:	4770      	bx	lr

08003e0c <_init>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	bf00      	nop
 8003e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e12:	bc08      	pop	{r3}
 8003e14:	469e      	mov	lr, r3
 8003e16:	4770      	bx	lr

08003e18 <_fini>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	bf00      	nop
 8003e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1e:	bc08      	pop	{r3}
 8003e20:	469e      	mov	lr, r3
 8003e22:	4770      	bx	lr
